# -*- coding: utf-8 -*-
"""
Created on Wed Sep  6 14:19:25 2023
"""

import biosteam as bst
import numpy as np
import matplotlib.pyplot as plt
import pandas as pd
from biorefineries.oleochemicals.systems_baseline import F
from biorefineries.oleochemicals.system_simulate import azelaic_acid_tea,aa_baseline,aa_baseline_groups
from biosteam import preferences
from biosteam import report
from biosteam.plots.utils import CABBI_green_colormap
from thermosteam.utils.colors import *
# from colors import GG_colors,GG_light_colors,CABBI_colors
import contourplots 
from biorefineries.oleochemicals.uncertainity_analysis import *
from biorefineries.oleochemicals.tag_compositions import high_oleic_vari_adjusted

#stacked bar plot
# %% Plot GWP breakdown stacked plot
#plotting the GWP stacked plot

def GWP_stacked_plots_displacement():
    fractions_of_impacts_just= [get_feedstock_GWP()*100/get_net_GWP_PA_1(),
                            get_other_materials_impact()*100/get_net_GWP_PA_1(),
                            get_ng_GWP()*100/get_net_GWP_PA_1(),
                            get_electricity_consumption_GWP()*100/get_net_GWP_PA_1(),
                            get_total_direct_emissions_GWP()*100/get_net_GWP_PA_1(),
                            -sum_displacement*100/get_net_GWP_PA_1()]
    fractions_of_impacts = [(value / 5) for value in fractions_of_impacts_just]
    indices_of_impacts = ['Feedstock','Other input materials','Natural gas',
                          'Electricity consumption','Direct emissions','Products']
    df_gwp =pd.DataFrame({"GWP breakdown":fractions_of_impacts})
    df_gwp.index = indices_of_impacts

    contourplots.stacked_bar_plot(df_gwp,
                      y_ticks = [-100,-75,-50,-25,0,25,50,75,100],
                      fig_width=3,
                      hatch_patterns=('\\','x'),
                      colors = [
                                # colors.green_shade.RGBn,
                                # colors.green_tint.RGBn,
                                # colors.green.RGBn,
                                # colors.yellow.RGBn,
                                # colors.CABBI_teal_green.RGBn,
                                # colors.CABBI_green.RGBn,
                                colors.CABBI_teal_green.RGBn,
                                colors.CABBI_brown.RGBn,
                                colors.yellow_tint.RGBn,
                                ], dpi = 1500)
    
def GWP_stacked_plots_mass():
    fractions_of_impacts_just= [get_feedstock_GWP()*100/get_net_GWP_PA_1(),
                            get_other_materials_impact()*100/get_net_GWP_PA_1(),
                            get_ng_GWP()*100/get_net_GWP_PA_1(),
                            get_electricity_consumption_GWP()*100/get_net_GWP_PA_1(),
                            get_total_direct_emissions_GWP()*100/get_net_GWP_PA_1(),
                            -sum_mass*100/get_net_GWP_PA_1()]
    fractions_of_impacts = [(value / 5) for value in fractions_of_impacts_just]
    indices_of_impacts = ['Feedstock','Other input materials','Natural gas',
                          'Electricity consumption','Direct emissions','Products']
    df_gwp =pd.DataFrame({"GWP breakdown":fractions_of_impacts})
    df_gwp.index = indices_of_impacts

    contourplots.stacked_bar_plot(df_gwp,
                      y_ticks = [-100,-75,-50,-25,0,25,50,75,100],
                      fig_width=3,
                      hatch_patterns=('\\','x'),
                      colors = [
                                # colors.green_shade.RGBn,
                                # colors.green_tint.RGBn,
                                # colors.green.RGBn,
                                # colors.yellow.RGBn,
                                # colors.CABBI_teal_green.RGBn,
                                # colors.CABBI_green.RGBn,
                                colors.CABBI_teal_green.RGBn,
                                colors.CABBI_brown.RGBn,
                                colors.yellow_tint.RGBn,
                                ], dpi = 1500)  
    
def GWP_stacked_plots_economic():
    fractions_of_impacts_just= [get_feedstock_GWP()*100/get_net_GWP_PA_1(),
                            get_other_materials_impact()*100/get_net_GWP_PA_1(),
                            get_ng_GWP()*100/get_net_GWP_PA_1(),
                            get_electricity_consumption_GWP()*100/get_net_GWP_PA_1(),
                            get_total_direct_emissions_GWP()*100/get_net_GWP_PA_1(),
                            -sum_economic*100/get_net_GWP_PA_1()]
    fractions_of_impacts = [(value / 5) for value in fractions_of_impacts_just]
    indices_of_impacts = ['Feedstock','Other input materials','Natural gas',
                          'Electricity consumption','Direct emissions','Products']
    df_gwp =pd.DataFrame({"GWP breakdown":fractions_of_impacts})
    df_gwp.index = indices_of_impacts

    contourplots.stacked_bar_plot(df_gwp,
                      y_ticks = [-100,-75,-50,-25,0,25,50,75,100],
                      fig_width=3,
                      hatch_patterns=('\\','x'),
                      colors = [
                                # colors.green_shade.RGBn,
                                # colors.green_tint.RGBn,
                                # colors.green.RGBn,
                                # colors.yellow.RGBn,
                                # colors.CABBI_teal_green.RGBn,
                                # colors.CABBI_green.RGBn,
                                colors.CABBI_teal_green.RGBn,
                                colors.CABBI_brown.RGBn,
                                colors.yellow_tint.RGBn,
                                ], dpi = 1500)      
    
    

#%%MPSP sensitivity plots

def MPSP_sensitivity_plot():
    bst.plots.plot_spearman_1d(rhos = (0.59,
                                       -0.48,
                                       0.18,
                                       -0.35,
                                       -0.21,
                                       -0.43
                                       ),
    index = ['High oleic soybean oil unit price',
             'Pelargonic acid unit price',
             'Hydrogen peroxide (50wt.%) unit price',
              'Oxidative reaction conversion (diol to intermediate)',
              'Oxidative reaction conversion (intermediate to products)',
              'Dihydroxylation reaction conversion',
              ],
    xlabel= 'MPSP',
    color = GG_colors.blue.RGBn,edgecolors = 'black', sort = False, w = 1./2)
    
def MFPP_sensitivity_plot():
    bst.plots.plot_spearman_1d(rhos = (0,
                                        0.49,
                                       -0.15,
                                       0.51,
                                       0.27,
                                       0.61,
                                       ),
    index = ['High oleic soybean oil price',
             'Pelargonic acid price',
             'Hydrogen peroxide (50wt.%) price',
              'Oxidative reaction conversion (diol to intermediate)',
              'Oxidative reaction conversion (intermediate to products)',
              'Dihydroxylation reaction conversion',
              ],
    name = "MFPP",
    color = GG_colors.orange.RGBn,edgecolors = 'black', sort = False,w = 1./2)    
    
def GWP_sensitivity_plot_displacement():
    bst.plots.plot_spearman_1d(rhos = (
                                       -0.44,
                                       -0.30,
                                       -0.59,
                                       0,
                                       0.40,
                                       0.30
                                       ),
    index = [
             'Pelargonic acid unit price',
                      'Oxidative reaction conversion (diol to intermediate)',
                      'Oxidative reaction conversion (intermediate to products)',
                      'Dihydroxylation reaction conversion',
                      'Boiler efficiency',
                      'Feedstock unit environmental impact',
                      'Hydrogen peroxide unit environmental impact',
                       ],
    name = "Azelaic acid GWP(100)-displacement ",
    color = GG_colors.purple.RGBn,edgecolors = 'black',sort = False,w = 1./2)    

def GWP_sensitivity_plot_mass():
    bst.plots.plot_spearman_1d(rhos = (0,
                                       0.03,
                                       0.05,
                                       -0.04,
                                       -0.11,
                                       0.80,
                                       0.55),
    index = [ 'Pelargonic acid unit price',
             'Oxidative reaction conversion (diol to intermediate)',
             'Oxidative reaction conversion (intermediate to products)',
             'Dihydroxylation reaction conversion',
             'Boiler efficiency',
             'Feedstock unit environmental impact',
             'Hydrogen peroxide unit environmental impact',
             ],
    name = "Azelaic acid GWP(100)-displacement ",
    color = GG_light_colors.purple.RGBn,edgecolors = 'black',sort = False,w = 1./2)    
    
def GWP_sensitivity_plot_economic():
    bst.plots.plot_spearman_1d(rhos = (-0.43,
                                       -0.41,
                                       -0.22,
                                       -0.54,
                                       0,
                                       0.38,
                                       0.30),
     index = [ 'Pelargonic acid unit price',
              'Oxidative reaction conversion (diol to intermediate)',
              'Oxidative reaction conversion (intermediate to products)',
              'Dihydroxylation reaction conversion',
              'Boiler efficiency',
              'Feedstock unit environmental impact',
              'Hydrogen peroxide unit environmental impact',
              ],
    name = "Azelaic acid GWP(100)-displacement ",
    color = GG_colors.purple.RGBn,edgecolors = 'black',sort = False,w = 1./2)        
        
#%%box and whiskers plot

def MPSP_box_and_whisk():
    contourplots.box_and_whiskers_plot(uncertainty_data= [9.58622764136106,7.56112484839384,8.58683290933517,7.03054310048098,8.54812861315455,8.35607037524544,8.36234718187196,6.45994839354373,8.03902137517888,8.92548258080935,8.27608050420627,8.54446510510106,9.13589151119615,7.919187597923,9.5761000172145,7.64627821000604,6.60973873270664,10.2941990890246,9.63514243452232,8.24706961385568,6.52465428766923,7.88531407695069,8.45345776205814,10.2407355478038,7.09498641015596,10.1796398270445,7.9806360135642,7.70957955898361,9.11224331300675,8.11014956915881,8.68108427132372,7.79859643446333,7.85480619078288,8.30212806472984,8.91658612941037,9.33547760402707,8.24232486076401,7.00885806735205,7.04230534071609,8.90910814177371,8.91502666658735,7.45189700892814,8.96369661382869,7.7992881860549,7.786515761108,7.58433809457513,8.8194122300587,7.56588004247189,8.47033166686051,8.22219759464644,10.1718983114714,9.23521789656242,7.54323860715403,7.81430771532644,8.60401677344881,8.03413365509258,8.82041195511099,8.2080635642485,6.28891158943192,7.92489134855216,6.44145142214779,10.0154248346064,8.03654729622437,6.84781553254886,8.16208634214814,10.7600332639871,8.38400777908586,7.62382811701754,8.0099695599813,6.75566861914434,8.19153472691666,10.15044108571,9.05396933926229,9.31150420582019,9.30297301517726,8.11282011848501,9.04620447320258,8.83955292734866,8.72712708547091,9.67933647565223,7.1136875630202,9.11667966934338,9.24239626252418,9.46171822666468,8.38903545765425,8.61226106201955,10.3461570110058,7.58611492864532,8.04803389941279,8.40347947643884,9.31431807784243,7.29080316829781,9.33423345988852,7.3385391847526,9.48705147898447,7.78066742539671,8.91865002972665,9.27786459585244,8.80438760304903,8.98462372002271,10.7194661443551,9.88096254601275,7.84602296674148,10.0890412151241,8.92121851671627,9.4203835256964,8.07102227054117,9.32656804089761,6.96648435926045,7.23229800266512,6.73422861720328,9.02397843577497,9.05160601016444,10.115220751374,7.93766550417078,7.22067878252833,7.8445565401289,6.59587981550485,9.24765282981476,8.41216243659614,7.91464030409977,7.36980096395813,7.27195976728491,8.02373850910776,6.75744746180078,9.45884831982279,8.1458255612126,8.70367188583434,7.96679669986165,8.96344317496459,7.52689231882156,8.22330657289938,8.65062704711836,7.85304730255408,8.31986940149843,5.91241688014749,8.41685099922482,9.2731499434513,8.94363736219876,9.81869011743161,9.86758381137763,7.74914101827958,7.18127427247606,8.61801986409419,10.5133467398244,9.32804982007021,9.49781620695001,9.1373628304607,8.40726916689604,9.87945790687355,8.34032492470921,7.17358649042933,9.41047225230336,7.54017699488549,8.14930590889252,9.78807872777271,8.44765320175751,8.62477953409441,10.0425465105303,6.93426108864427,8.64834146838453,8.08748656147231,9.17432929356189,7.34685188975915,9.47453340415519,9.58486071758891,8.96572596067228,9.2294827299833,7.47512132838501,8.17331624803953,9.69163194572227,8.3110981632985,8.87045326987948,8.53945230378905,8.18223378203523,8.61881168208966,8.93852408208826,10.9660414919987,7.8349690141046,8.51196117226324,7.3711263459299,8.69160885675432,9.02226727905517,6.92739586032932,9.43163038960137,9.00870801258395,8.18315933474756,8.08640758322121,7.88389526696656,7.398351460224,5.98169711815274,9.20400270933454,6.03049123312686,7.96673013849802,7.7847398773613,7.25169876909319,8.94661144645785,8.39523751134592,8.86208416082008,8.20273782913739,7.51212968123632,9.21738181457057,9.26041690429965,9.5576364485195,9.04667613539204,7.85012675665538,9.66846430640856,8.94425756607389,7.82066775810288,7.67718832013925,7.16765569024666,9.37783741185068,7.93281251316371,9.44200498148181,7.9928453257556,8.64735042929055,8.61987201102678,8.80322341451362,6.79492853430449,10.1838300947499,9.72772945379148,9.16371741922316,8.34095126919062,8.34051780637053,9.30067041165858,8.75587118647567,7.7304107948859,7.48495206558548,10.1846352899808,9.04777925775051,8.09988743006226,7.19816693921453,7.50397512742161,9.25583535153974,9.68257013338866,7.4133023815732,8.60944855130444,8.32602556316167,8.69584981637256,7.21597128100491,9.76577834263433,8.69294539478784,9.99287562082265,7.7576209601344,9.6933168220523,8.49184868743703,9.47343646742996,9.3834067958607,7.83947667179465,7.42600117875663,11.0388878172242,9.1465852475492,6.60860820880101,7.30121988396734,8.59998277700385,8.08800393696774,8.27523196587234,7.45918132638495,10.6622614137856,7.68480457998278,7.83861908037304,7.50019681980697,9.11248415730941,8.23682001639671,8.81295366874805,9.17270803470225,9.71840168294788,9.1961308876175,9.85472262496866,7.40922295280102,7.86212419182649,8.02829969181613,8.4365644835662,7.24187625116071,9.43799619379795,8.6440631032084,8.67314984903786,8.70997050017574,6.89023762173939,8.96160883653916,8.47442779662459,9.99867640730086,7.81563903148654,9.1613238157222,7.53845153501858,8.04532010676502,7.85685518888443,9.44294911962867,9.29764440752292,10.4015880989745,9.22771368176933,6.75750627090953,6.89653804014693,8.65496921508355,9.51354011763417,7.4574290255573,8.57745158134977,9.75583480635552,8.04989693759857,8.46360370776699,8.93988951385943,9.56597051130031,9.03312571980557,8.56506616990756,8.14184713027214,7.11071519645429,11.8773216639805,8.19561734478595,9.20029215773079,7.54300242903622,8.98242309216218,10.2019657846918,7.44231775312098,6.29834832248558,7.68854125970562,8.37724828517212,8.1631061911241,9.03372970822609,9.66157964911056,8.69535180025857,8.79931703644786,10.188712653048,8.23513812555773,10.5323695063843,7.89046662681078,8.05190116557643,8.92884870040784,10.4761177017766,7.05364249391933,11.0319529069944,9.59793525842482,6.52082244826835,8.43951030588978,8.40315830952561,8.00270446382342,8.15189778016361,9.01550231402337,7.31653372555941,8.36652656425544,8.53988889421941,7.74822494915183,8.5538557172108,8.5199529525093,7.21934684713934,8.69267942478465,8.0564611432559,9.03393706938336,8.31267926536493,6.5607039656765,8.22941656417372,11.0117093779393,10.0567524047883,9.94925699664135,6.87401583834571,9.8467800974966,10.8989832552183,7.99264726750493,9.0463526016114,9.10827756593412,8.24556324598629,7.98964240708011,6.8408233043944,8.58985200043987,9.59458201129758,8.87329264220312,8.95435964621832,9.8273145722851,7.92596729613188,7.26813045657526,10.0999822775123,7.32034423635741,6.3893007475177,8.39166765427672,9.13545334959969,7.90665992751821,8.68225983158434,8.35646247113314,8.22293511326005,8.04798095101914,9.25408583834679,7.10564492171688,8.85992370912559,7.82659375701534,7.63838140606105,6.3713141633092,9.36755398544596,6.21438913315092,9.32304089575383,9.18491849945907,7.69310500572052,6.65604427806754,9.57924337264331,9.58629844376774,8.51956456472856,8.83396134843197,7.54837271817226,7.88366168788091,9.64215409835526,6.47261821867358,8.12062283140215,8.47903107874815,10.7580769634729,8.6842650705599,8.52234532489674,6.56840148236808,7.97072720293662,9.25751261628796,7.36678658917421,8.5776711205526,8.87011360083579,7.88101748272896,9.75598247509416,9.0724071213284,7.95725304267486,10.8637955553278,7.3857909920822,7.45988972951492,7.91672519290159,8.26927598275003,9.42801757878506,7.27159084156928,10.0036462129775,9.15448441434591,8.93978898355461,8.85409483789503,8.3562740140397,8.90394495337109,7.39333801118871,9.9332262768651,9.11566923937336,8.01744796433844,8.04774033522861,10.2643669800811,8.72824735640091,9.94494187793133,8.77252446283415,10.0464633764326,9.20796768985969,8.98300277503341,9.40218283576002,8.9940427954124,8.95549524824796,8.40770010998437,10.1006153108889,8.44430952918565,9.16396013926978,10.7746017132718,7.61672709184195,9.55264473085076,7.86716964022897,7.17386229250696,11.4631593699515,6.67651619050552,9.08482328689438,7.77958835813902,9.79928960281843,9.38144958507943,9.60716586239649,9.31557236309172,9.24531522990806,9.87056516313081,8.49677378221685,9.08811401930658,7.86343540831298,10.1556064910627,9.05143229608893,8.81930582704982,9.40436345217403,9.57179584461234,10.8518258925005,7.07732481795517,10.0902038151784,8.87779312925201,9.10947164721515,8.45813302642915,8.12576060334817,8.51235684657795,9.14448690944416,10.223526123616,9.60098052113993,9.24454404480782,8.30939926947555,8.10429756684471,8.44288634430733,7.32614994244489,8.40215581934814,10.1387208511042,7.99519489946087,8.45132472034787,7.43046504227211,8.76215923052681,8.38686831182077,10.2601813229028,8.54344296068096,9.20465675174323,8.81596279985644,7.48268879220399,6.55713727720004,7.74091356662333,7.67044274408645,8.04423802742549,7.26168578254711,7.48365835124692,7.28309502848013,8.81882598495262,9.29442612464698,7.52884758399695,10.2962887830579,9.59792024925193,7.89658130772923,8.40128047263509,8.13124564300316,7.35036567410423,9.50550196308143,9.5132023583082,7.30075306739473,7.80721993790253,7.70825302927225,7.81437514905459,8.16132116113179,7.1866864858288,6.73787472940285,8.4481862639951,9.03561409259759,10.2132676001941,8.63653169151632,7.98907910753701,7.67736771922586,7.52019895165985,7.89953122646446,10.9229996630478,8.97170301781479,8.87205019834441,9.0779769973504,8.33958950114434,9.892533034244,10.0748966273011,8.78657336967342,9.38466911496953,7.47889012082058,9.28949406771241,10.003008827454,10.1472980090908,9.29506011112178,9.12280860718551,8.51646159645868,9.11617312187374,8.62285476279578,10.6185103298604,9.18758890511038,6.82910112817853,8.859393041205,9.68737629534865,10.6176088397446,6.80829851795953,8.77682179084073,9.26540465580376,8.92045059921936,9.06243345814854,9.96963504561358,7.69633704952187,10.05056628993,7.51167154599099,11.6066418235837,8.51552106973035,10.2474597101757,10.3534634158003,10.4209629258023,9.33916912563109,8.87566043042599,9.35793668395274,7.50176710504732,8.4927783899229,9.98353559722535,8.43879688708605,8.45848448951781,9.69414931652031,10.9289889820606,7.11806551578612,9.83227498123935,10.9553123103233,8.93622985989977,7.45407795156833,10.3549663671449,7.96723970488088,8.68012738783648,11.8319730635537,11.240948853074,8.04876273455039,6.88786983750805,8.32510342836804,10.4074769986612,10.498506182108,7.3883989918319,8.73478258305253,9.61544011284852,10.4094047346157,8.09040536766418,7.17752627183915,9.29399676525283,8.65810987457867,9.32763579431278,7.29698483040668,8.89539720597732,8.92746949002186,9.1978521254047,11.4118493974195,9.41095229543352,8.59049016512635,8.27721718072352,7.03004999016771,7.62055049708711,6.8029722113118,7.16080719391647,7.16622006191958,10.7970401509219,8.29764094326414,7.37348293711433,10.112384603048,8.44596036665594,12.0293108563647,8.43179626622725,8.90026869767465,8.44617162003548,7.46367636480098,9.95134053090245,10.9168611943121,10.121454771504,8.70931438624293,8.75605525884197,8.4316392347604,8.98857965803017,8.87590003645805,10.2363729124649,8.65764717402844,7.55686691304296,9.99714532035019,8.89368095001615,8.96889611608716,8.58908929757983,8.94607546182254,9.58021743855407,9.51701991108096,7.82490978090795,7.80390467917683,10.1314073606353,8.53754450837392,9.05480047526468,8.08627190462433,8.78347482746768,6.53716983652664,10.3461145322965,7.75256107132134,7.66224892624842,7.18096724721962,8.22707599666207,9.99325140140731,10.773076927997,7.24010318721846,7.15023845385393,8.80553712304961,9.14236445634377,9.3386650751961,8.48958625619232,9.52322263813004,9.21296881062078,8.67404502024183,8.88558343015097,8.33464637147154,9.22408209986993,6.99448510422334,8.0503780005848,9.0021861219099,7.92284961084794,10.0137529241367,10.2345155304894,10.0557416759149,8.20369014149818,7.86256350551213,8.12721154826608,8.70687592964765,8.81330742710546,9.66453072172904,10.5651009469422,8.06573024900486,7.28131478483211,7.57356440353915,6.96030689178997,8.1261984509026,9.10429741143192,8.83437930614988,8.7978909773576,9.39464303787456,9.84741088327893,7.8174912716268,7.08266497522756,7.20094085197505,9.13744683861122,8.64011474634556,6.76246690377533,7.68058866053113,10.5390709235035,10.451030803745,7.04506644343741,11.6496032237938,7.66657389745374,8.9885789196669,8.03497186424988,9.88954201612706,8.68241762744601,7.67725364073518,9.13624511337727,8.22217658107986,7.99906388605831,9.1100903276577,9.51676969522786,8.58167848526075,7.70294493499082,8.76560949259036,7.80131333590289,9.86214157748656,9.95799911908059,8.80206787547552,7.96455642691343,8.77532400481036,9.00863309789539,7.49328498659296,8.11379345410015,10.0836764465234,8.9314434495223,10.2552377377929,9.42001719425975,9.90539836107023,8.93120167920229,10.3515159180563,9.77592328607312,9.01251918249788,10.4469242318688,8.47484053263022,9.00813154864462,8.99055601033784,6.42865407817765,9.58579268919296,7.29523756681259,9.18050172496254,10.1619971264654,7.21447715662084,8.02514793513121,9.17892013577515,8.55046233942239,7.22655750786814,9.86832254204894,7.78649351022375,7.71638789686948,8.40001686291773,8.58045181495504,8.48564547755679,7.46882836597804,7.02527294159842,8.38655641575181,8.55690999823667,8.77636493698823,9.34113077897403,9.87387547323203,7.50479543680839,8.19578554857952,8.94825911160062,9.04728327886151,7.00372496701971,8.22224305491527,7.93272199951883,10.2735841390295,10.4213378421431,8.35229448391188,6.43962903483304,7.64826923080819,8.80825663130514,7.44997561110745,9.08130527278466,8.42880722555947,9.23385629578446,7.47903558225154,10.7563623348811,9.02170145243918,8.99396586164998,8.71970032014533,8.05135226675955,8.73213520439605,7.15976299278343,8.39101797112629,9.75642009915695,9.84260964281874,8.35309377554401,8.15788766063527,7.87544856382118,9.75770474678081,7.1639742331053,8.80830965220486,8.85492540691786,7.61756537007787,7.21477977591625,10.2213605888447,8.31042541702475,7.90595974638818,10.2183789354074,8.71212739869285,8.36146172828644,7.02516355491917,7.72608235574956,8.17370516635201,9.01056822486168,7.11861186079536,10.446198067648,7.58062200537089,8.32955126654175,7.72014005072379,9.01666273381062,7.80659996264738,9.7972790466376,9.32994148630517,9.10255262842935,10.4663927255118,8.10332994534445,9.65315591704483,8.82951049811057,9.75100279659104,7.18860929464701,8.46073285412814,8.20604145496913,9.83866803546701,9.57440392630141,8.86369526845719,10.6642418832977,8.19136410075601,10.0958955388116,8.31081516080017,7.30634761731743,8.74469117340091,7.99382870385441,10.169164876838,7.15866806580692,7.83768213997745,9.46331499976057,7.47130555233441,10.5671181728466,8.26449506363828,7.85644339723342,8.03265679288796,7.9657871323097,7.25554290076938,7.11060947846083,8.37996688871498,7.87723925622946,9.31987947992638,6.87378303341772,8.96488851073872,8.65414443205763,7.75578317946777,7.13951203521609,8.23105696016741,7.33165883557716,10.4863124275749,8.95732068516139,8.85136538858002,9.23207328266122,7.22669824681407,8.10848579022919,9.41834080171923,7.79796537459667,6.79082570841256,10.1083550366427,8.30192648509884,7.60436979438213,10.1044329517189,9.17524650271291,7.44025473582898,8.96125075850574,10.3435647953505,7.97492970034949,9.46786244711106,8.62422208112194,9.63287395523473,7.5712151495454,8.43331377400503,9.16446125028856,9.77924406968499,6.61806488963992,9.11724616242538,9.15285666970938,7.44631195272537,9.13764359181452,9.25092043221416,8.59059034416211,6.23774228591225,9.01681182028693,7.60952111336473,8.3694028186392,6.76220311216499,9.89643727984378,6.98804779262774,8.92825315560711,7.705302979253,7.35316412256845,8.85881370485727,9.49239702738443,7.94451023776663,9.87198663149289,10.1579869706163,8.37984463226003,7.93684085575567,8.93799200797364,8.82382354774623,8.86678688689589,7.9931846849793,8.60548785219044,7.27843482130321,10.7736854177271,9.60682864546263,10.2790947488522,7.3285229769049,8.24423614368898,11.2719492419236,8.48398004889278,8.89899395384745,9.92092543746292,6.35459140796869,8.71454808029718,11.2202998917206,9.32844130996955,8.44762352589062,7.71121911715344,7.72057622258979,7.07929453996959,10.5716593661357,6.54739151181037,8.48314956748191,9.73679453231402,9.06871317503145,8.13493157354759,8.91356075048051,9.35878138636942,9.28585446489755,7.42648612978808,8.40449157145927,10.1625081338286,11.1123685200619,8.67281494884404,10.0178606122608,7.57476626518756,7.78158845114803,8.22219749165174,9.26702077954186,8.65744100240691,8.21961704007378,9.48217848522525,11.7255682398238,9.62972947225522,6.96970693400437,10.6942768612988,7.15732081696656,9.29287568476842,8.03854011503565,7.58169837433852,8.73497059002114,7.63732222459948,7.14179406336058,6.98654140797622,7.762868460133,9.4187443368991,8.08026104584092,8.76943766904357,8.19321415791425,8.18190423839016,7.32198986558192,9.16218589213201,9.75182027561733,9.50319260031457,9.65295818851169,7.8406395601128,7.78235885308112,6.61299263505894,8.4080561478394,9.20648538819517,8.09716513897188,7.7056457956017,10.1794338911268,7.0824499979212,7.95940418863158,7.9005652286948,7.30325348352921,10.2093556793212,8.16574835367919,7.46725016061086,10.0878892624109,9.68172413837418,9.85375975950147,8.59622052591582,8.16593081966538,10.8979604140713,6.44054884790392],
                                       baseline_values = [azelaic_acid_tea.solve_price(azelaic_acid)],
                                       y_ticks = [6,7,8,9,10,11,12],
                                       # ranges_for_comparison=[[10,12]],
                                       boxcolor=colors.red.RGBn,
                                       height_ratios = [1, 8],
                                       fig_height=5.0,
                                       # ranges_for_comparison_colors = colors.CABBI_orange.RGBn
                                       dpi = 1000 )
    
def MFPP_box_and_whisk():
    contourplots.box_and_whiskers_plot(uncertainty_data= [4.60013855974815,2.98690627394124,4.19818482694934,4.44488414070421,3.62847550702389,3.53653549175188,3.5937180604329,4.67761346215471,4.17529267969846,3.00516822287134,4.47208308360461,3.53546441925786,3.62781781737241,4.17112749972446,2.89445853991332,4.162641910477,4.45529436889174,3.78384653935502,3.90780764577419,4.56119848332185,4.61768793749579,3.9396244463842,3.62819706018035,3.63954199591519,2.93559539591381,3.82321622126884,4.31868819386189,3.82262240151596,3.85240664439791,3.62991378318613,4.52261482952278,3.49931977408374,4.30503657955257,5.02166790513015,4.10949804004638,3.69515873750876,4.07031681226022,4.1554479870979,4.35444582016176,3.3455369049465,4.20047468399315,2.76780594704916,4.12934810734869,3.65735399578496,2.77249582717467,3.20589656443504,4.09758745879704,3.4922782493797,3.28270876431886,3.38828337002529,3.62231707992953,4.62327990084522,3.51064305204838,3.99575931788441,2.59287618666084,3.58692513301858,3.62749357967144,4.19664805454175,3.84168404152315,3.91251325266637,3.68169738822164,4.0104270156847,4.09697060723441,2.98655145882958,3.68269467266051,4.75634073817156,3.30766659283051,4.40389668453095,3.76389442917826,4.07979107018071,3.75277085161006,4.11153040016476,2.991836606782,3.95677767232973,4.78336715422806,3.50542075295249,3.48859381324481,3.71866482118531,2.99073253222455,4.73002111558404,4.21487770074539,3.4305227505619,3.83545541105462,2.53759159937143,4.33195945045028,4.328368794396,3.87109687935877,3.28869727302663,3.46002265403496,4.02422193335643,4.25304783056463,3.64535798553056,3.62041668692996,3.27781795135201,4.02022350173472,3.6511632518656,3.49505622671669,5.09825166905399,4.9369308497153,3.89389312823208,4.46356905366763,3.56077539241965,4.63131501078261,3.54783245292035,4.4405397477884,3.94678202283797,4.91535373370583,3.63305731769344,3.95704990934562,3.63336770904475,4.3385718020529,3.67479576624301,3.33236111935889,4.50281284152927,3.75417277471838,3.89406367722084,4.35046118043756,4.2608577179657,3.38639284644026,3.77118142535392,3.90742602078023,4.17076125433362,3.04227746472287,3.3936345979818,3.86388718948685,4.05342157435789,3.59655029928596,4.37935361559612,3.52981132359809,3.18366651274767,4.59920647443513,4.18568773622794,3.83292600520998,4.2653281534923,4.30140708112699,3.29418144655985,4.26302702725608,3.73582198804452,3.36955687989137,4.48574455892393,4.05352382939344,4.74185739584141,3.65295052175553,4.28388176648996,3.64267069418687,4.97404538120307,3.51950424017586,3.57801268035353,3.64204861995617,4.59395333110854,4.51693073929217,4.7702257748285,3.72190245211507,4.22714878156798,3.48247215029641,3.28923155691526,4.36527911616119,3.27514375011503,4.04597740018142,4.06331480141862,3.3858118236794,4.51229824162709,3.44122144009164,4.24205405302584,3.92104150019307,3.38188346010398,4.3132875684737,3.20560077226702,4.12563380672309,3.51260737518579,2.87924230569297,4.24428061114782,3.41532241716678,4.16522505400357,3.39717564421544,3.50036091939806,3.3132121105701,3.97692097534032,3.33288261996466,4.05968297111705,3.79816485252332,3.00817372434316,3.9679236837633,4.16486767394701,3.82873857130416,3.56979378306097,3.77809631466236,3.22944111036171,3.96734903560903,4.19652578721298,4.18667212982794,3.90784433978016,4.264704157628,3.53415620865384,3.74699494116247,3.38227345784988,3.92738019678151,4.43881039771236,3.27187391364493,3.93580334680161,4.04849208266744,3.84354953155612,3.9633188104535,4.58282894011718,3.3687841811719,4.06988552583384,4.72972849082457,4.28619370018291,3.14154480484305,3.70591204610817,4.31763480621093,4.96473123633264,3.7487870722134,3.73497372923697,4.26339688017686,3.19390516552369,3.8917894551619,2.79543572746624,4.51403006727183,3.99501951001015,3.48673682271488,3.91751991011617,4.41767051376547,3.36847909731345,4.03833365529784,4.8284513974504,4.20356655625145,3.3711701811221,3.53020425733197,3.55605230383023,3.55106405687753,4.55864324774498,3.72713762330854,4.05188842568304,4.24986247515514,4.54668847899368,3.21243405838881,3.82903964143748,3.77460784825064,3.71484532537116,4.45191718425198,4.42951477276226,3.98560052854423,3.65508397760125,3.83223674714637,3.77547431820122,4.39965925675357,4.12005983006309,3.43882236774024,4.02677144900924,3.8756469490626,3.41904078682113,4.08834222428704,4.11316201758203,3.38609862686618,4.02891871041945,4.99988756989747,3.72391022053811,5.234477466755,3.19264401033343,4.14868522394194,3.98012271723296,2.89141499161511,3.07468085032426,3.48809348892196,3.47256947272421,3.97687279118966,3.5396395078999,3.99258232199246,3.32321880770654,3.38143859021076,2.80504600255867,3.48554323858049,3.85146065795716,3.12923361757983,3.82219526049975,4.25042457051084,4.19207733802479,2.6677995768734,3.67559338728506,4.56508871019338,4.03351016537156,3.65946361446627,4.09379524889188,3.56478352025971,3.25533171904193,3.99116700114462,3.4222258446065,3.72060754051457,4.41421001459382,3.63667183981535,3.5300819209863,3.87321790019687,3.89273781314507,3.72085112322802,2.61703141236542,4.41923982788352,2.75378135563709,2.57958788170496,3.58928677429105,4.92752663589838,3.75598300072389,3.70205729156824,3.92210113097282,4.23675621546205,4.01660867786113,3.52099866938575,3.13723729159775,3.81050286742254,3.35182845518418,3.36647805815697,4.2879587430729,3.89278636665723,4.15981252916228,4.1117949039959,4.20219287781018,3.30750873204697,3.45579616340648,3.9502782983349,3.53407189751672,3.48074709248396,4.32396884142184,3.85696941081372,3.10394321708455,3.37668559464071,3.39182685908179,3.91626235816258,3.26827931892928,3.93625824456778,4.37665959740072,3.77059736756826,3.59098740612207,3.71610361525052,3.62378297845719,3.24939038620616,3.55406850816971,3.50246372343244,3.31069095820071,3.98026207220934,4.03092432443256,3.92016675039498,4.2048467548906,3.20150186557711,2.74714633324007,4.30606857238165,4.86266926945139,3.91267137322613,4.80968671384364,3.31413129647976,4.44531097899646,4.17296241433044,4.38006344456481,3.80542194245236,3.94876298346629,3.44686807105587,4.75604791346805,4.20699034741277,3.38911679684859,3.2055242645407,3.93265199687193,3.95470993038241,3.75475814386345,3.6753283017614,3.08049816857199,4.44359582512759,3.87721849490079,2.87551178665809,2.98771027911254,3.53193649603561,4.05694057005004,3.686235809543,3.94077385545069,3.42204279590351,2.84347907185274,3.16584673562707,4.55483396152334,3.83308528421958,3.85545865779927,4.128594502103,2.51040958769054,4.07440295277188,3.41205820417693,4.08499456112099,3.6114724171213,3.19968420838678,3.94040306566833,4.17719800137217,4.33519593921408,4.21119918128539,4.44159763619545,3.5615065708322,4.0936838991299,3.17459039054325,2.56618125440575,2.88361718455592,3.79108467088149,3.21470916799769,4.23298122345781,4.00141435568123,3.76307133024849,3.67155021003357,4.46912178609004,3.53119233298218,3.41149128307208,3.68286477830394,3.96460617825983,3.80779581619421,3.09905223530135,3.36083652908254,3.69691155400141,4.4427781059727,3.77611461277681,2.66986413054121,2.55380072107902,3.73258338596948,4.15067541014978,3.40214930047147,3.92736941615881,4.22289698866768,3.0026535069511,3.1320909063018,4.26005113197105,2.78790843631809,3.78040457327171,3.48151412248831,3.27398706569534,3.41428898935195,3.7630882949736,4.25874332589467,3.17029298099258,4.15660522050005,3.84019437279937,3.39209917925383,2.77361190581851,3.3702926565862,3.34897783216821,2.81012485856515,4.19661453549899,3.37602012342105,4.59128637597984,3.07522989150879,4.05152530306403,3.94252054976526,3.19139074176239,3.77548396394272,4.1497928013311,2.73421917070091,3.76802921189872,3.59053429466858,4.09200433848008,3.21214819128333,3.22612073604287,3.94383845596439,3.9905065815498,3.3612834463215,3.97644588086431,3.63337124289072,3.40134829476963,3.37105917912323,3.50549678118525,4.58038541660626,3.82349235810031,3.84056794107286,3.43864810957286,3.10022797584811,3.5527820733138,3.37547964552631,4.05277334338361,3.68216023480219,3.07866167116962,4.00697993994292,4.06170382865821,4.61302509855284,4.17625393961757,3.70571952243401,3.3096682825794,3.07556580177065,3.45903229910716,4.57343519215697,4.35402296156153,4.0060521793901,3.63681378302462,3.79871199924463,4.12703172578988,4.52428861309181,3.30550563232002,3.44909437708773,5.1572996470212,4.07396909355148,4.13351783254624,3.66542109155785,3.81897999350563,2.58308419808065,4.48436549480983,3.65422560577181,3.80650401783033,4.35121182576534,3.87356411139313,3.86540752803903,3.72912781509011,4.26867155085828,4.10447487713612,4.43769763437684,4.29296721179795,3.44488171562827,3.6861935765547,3.73887690654318,3.38902678268222,3.5800087029075,3.61397444546195,3.94811315191425,3.90439372946086,3.71554684097028,3.5918847223347,4.19478194112164,4.0761372368553,4.23345459564951,3.80543506062817,4.4389964814632,3.29198931634677,3.135194019104,3.09469066272211,4.01383659121884,4.00159755101827,4.05013777586785,4.55909301596584,3.86220275624991,3.73106510396976,2.96712901357831,4.12791282405832,2.9175390143336,3.61187477357834,3.71579494488876,3.68981363729025,3.87797730527257,3.49141506105034,4.05210184830251,2.96854062903536,3.9062257161975,3.58563258276837,3.43114313131384,3.49260434376353,2.65008740317912,3.23289465667263,3.23691954317942,3.90578339824247,3.65078553894788,4.25541608188607,2.86872730179693,4.04966936244635,4.73568191990984,3.82488159565429,3.68381980604533,3.17293006185359,4.01104616086703,4.40962071089764,3.46284094829218,4.13264551385325,3.09929118796117,3.63480046100152,3.03712016062435,4.21689842713559,3.78600092168543,3.40114607855018,3.00117348474046,3.30777721345026,3.82808388380576,3.14618608178382,4.30406083472893,3.75618486478068,3.72389459680797,3.15777291546747,3.95759788444555,3.40960903246502,3.55471491865974,3.3114508834703,3.02442994459474,3.79610372367368,2.86672706151698,4.43632725704887,3.49276897532958,3.91478055823461,3.87706649174652,3.90141185743242,3.83510388112541,3.18064116499855,4.56394403092123,3.75462670292433,3.60122640660467,3.78218069626281,3.78489852609992,3.26842517420839,4.1857777394753,3.78196871301644,3.80995126264353,4.57691756786691,3.80628727879508,3.83797658741224,2.8612613433915,4.05615179318197,4.00704032913389,4.54617054884088,3.6723427584202,4.55382092334029,4.58284826192582,3.91808894981068,3.4258875786136,3.61414646994179,3.01188406948462,4.44477843898755,3.57407624604594,4.07619887283036,3.40910802336701,4.88547642635067,3.79564018528786,4.54808020020388,4.09889385374709,3.65687340801796,3.8313498870899,4.65373971897215,3.12238071384329,4.27804222298866,3.94844530100255,3.4145141887297,3.60229596902484,4.02486453208766,3.35750734908711,3.70174839817093,4.7538102113827,4.00983289604165,3.44969082521778,4.22557437148483,3.71421116551995,3.67801812289681,4.15270754852765,3.42144629896783,3.64091924389153,3.32616180130557,4.565028296295,4.47974805321291,3.72873121539014,3.36330049522674,3.71333160986403,4.0040637890761,3.17417321360301,3.41035574589008,4.91918088742419,3.23942501685627,3.4584220347625,3.00683108858186,4.49844284991413,4.27402122816468,3.93306150766987,3.27471861116349,4.19002740983863,4.2676127404581,4.11593098076244,4.2632667011565,3.58722225922555,4.64778247373581,3.34235624927528,3.85624057528862,4.5341071858056,4.12207828384549,3.94067650145935,3.6021945668702,4.11076111873038,3.87348896339821,4.81193937073426,3.5098664789752,2.97501817587664,4.59059803986101,3.3371006961692,3.19639662861074,3.84173839873643,4.21978937369683,3.27593970042807,3.54465040335928,3.21219455394768,3.21992894969537,3.72494165110613,2.86262324595219,3.43798067212261,4.02355396915859,3.91178293031069,3.99507886251945,4.83188901232405,4.48401747023579,3.42283877690421,3.72907217194148,3.98950395865227,3.83916210035103,4.45946300876248,2.48868929326381,4.60314226778995,4.5329825812359,4.19676141722635,3.03735952025418,3.85999924312216,3.29350476606079,3.94913642985938,4.13036465721643,3.17950098370655,3.23914952566761,4.40615787045593,3.70490083706878,3.6960074461418,4.3547957186186,4.47408230017314,3.00474530517637,3.10439244515937,3.21734719465391,3.59509306255929,3.64318487302815,3.71397579737318,4.54718996899778,3.42405232025425,4.89732791163,3.40210118331506,4.24421193036673,3.20590071105475,4.75277037155875,3.68885610728956,3.46450839232123,3.58342124663413,3.78746636490462,4.4229149154,3.97076195517938,3.45320156865256,3.74722359653344,4.00302218118672,3.65720139610928,3.20557052540929,2.74630591677381,3.83706737506909,3.32185103133724,4.11490289207304,3.98691115523248,4.00104048207474,3.72453082271572,4.35991884377078,2.71425810311776,4.29892166741235,3.36991726047991,4.02236724381959,3.50665774041187,4.67492159340452,4.75075937485013,3.79108329816925,2.85874395526655,4.6061410174828,4.35486126792276,3.21710198233661,3.56299531909353,3.69859132022515,3.24930309620961,3.89835165388712,3.37215557777251,3.39198023124772,3.46731989069964,4.06161904774068,4.2115809029284,4.36411924958809,4.02213521656525,3.99636294337894,3.20729467895354,3.55751845426262,4.28286445839802,4.20812094217692,4.0517683711733,3.666202909509,3.03924275660453,3.82525650602499,3.87060832031094,4.02210252210926,3.47156842215268,4.55951690048192,3.76404091745563,3.3029379431926,3.67322677010388,3.24168187635807,4.35645039205614,3.25570269630699,4.26358253845965,3.99858526471636,3.83591347363941,3.84590171662915,3.6404874426666,3.66299696888443,4.03368085625221,4.02917481853193,3.75334418559578,3.30177349980167,3.46835833269687,4.16563290835228,2.99243939951471,3.85790193376038,3.59962884054014,4.01048649344632,3.98544443246672,3.91827553512256,3.54387462138732,3.3079111707615,4.16986282061257,4.71823129343347,3.59605115635584,4.30024839488254,4.67980958839143,3.53748917868056,4.69714911177106,4.61150122225628,3.54132173727655,3.42756783740736,3.40659417885602,3.06575550856598,3.70844694664744,4.26602842354473,3.92441028095306,3.30809332777197,4.32032789994125,3.51644085640074,3.74657073637822,2.98053769894733,3.72212312820017,3.96397250081851,4.08340097675438,3.62516225617194,4.25242392044084,4.32877604663654,3.3045634738374,3.90891293396548,3.92494475296055,3.41042374011588,2.97377509893923,3.22047499067585,3.43331635094184,4.23240302871598,3.81522157683135,4.28940963105523,3.21429037790032,4.94182783064162,3.25804434400873,3.78124048445808,3.65079852734327,3.56475810694073,3.63543607836779,4.28165688084083,3.05209643772509,4.36665373888335,4.20428624136539,3.10310519552594,3.55469605934652,3.52475181405299,3.80886789435513,3.60428011272952,2.88377846157445,3.95898514210133,4.13125900306006,4.30016121698738,3.49627562169992,3.72005020474604,3.9774024308718,3.74416948258075,3.37118019051315,4.99470116994787,3.54839336835503,3.93971315413339,3.61620259215978,4.12996807509268,4.01441130632712,3.71624968015312,4.10533671363789,3.36153297084135,3.62471844555366,3.50253299755684,4.61226498129855,4.42495316139967,4.09106924023754,4.89103801440799,4.03073788539953,4.09111669292232,3.98953787342114,4.44821315991816,4.68976301536839,4.72128090078251,4.15427665585029,3.64144310042402,3.85398856866858,3.19467899196136,4.83515600340563,4.76074382172732,4.65416213497637,3.64193720776206,3.70834402192635,3.37777450417137,3.3961591351605,3.64952161937292,3.70535090341428,3.5790941056188,3.23058762253172,3.71512034977949,3.55550234598552,3.48767946930992,3.8461396871648,3.91004553157641,3.73508991856644,3.87038743328542,3.09867158311649,3.91960563658482,3.20923506007026,4.53895915055239,3.82062294916492,5.04013027040792,3.43993776138667,3.51340878687465,4.05902412243788,3.90890367104789,3.56810766932553,3.71882049814307,4.54670808555162,3.74297520367285,3.1999723656971,3.38150529805837,4.00365017901682,3.86813507243293,3.80948772684742,3.34432772531739,3.85303574022637,3.3103952747268,4.2081844883787,4.48619294634706,4.276533416049,3.79866075524443,3.78784145581696,2.98425216840987,3.55009697900753,4.75180503741535,4.5029173438231,3.1715958053871,4.89519609514865,4.48145176326967,4.69814748802501,3.73971065577052,4.20316356093305,4.29007851403029,4.34017874252242,4.57575584366089,4.36215047895021,3.83485509453864,3.11290368373148,4.38875085184367,3.64158601854351,4.66118556719111,3.70620805682115,4.29651563942941,4.58679400836778,3.78064798627285,3.99379536038908,3.86485617863235,3.81021605643917,3.52464616305548,4.60168392733465,4.38881210369762,3.95799349307631,3.85742041024863,3.96976915965663,4.13040194056349,4.5804289603182,3.93671368216182,3.13724174272253,3.73781467330278,3.61364499831514,3.88130224598191,4.62236432974591,3.48454538064217,4.22063442248564,3.28745861675625,3.3619696216422,3.8561424202705,4.65501138520383,4.00869732816336,3.65712955971206,3.32825872434573,4.48412960186184,4.40384702720393,3.43079784290569,3.92316866181502,3.99671769749004,3.34472331572314,3.6612967546268,3.50430172358223,3.94267929410886,4.8109006919822,4.41289607565498,4.09063582123671,4.17534115028929,4.44241032937915,3.33581969146374,4.44009244254398,3.0134075266297],
                                       baseline_values = [azelaic_acid_tea.solve_price(crude_vegetable_oil)],
                                       y_ticks = [1,2,3,4,5],
                                       # ranges_for_comparison=[[10,12]],
                                       boxcolor=colors.red_shade.RGBn,
                                       height_ratios = [1, 8],
                                       fig_height=5.0,
                                       # ranges_for_comparison_colors = colors.CABBI_orange.RGBn
                                       dpi = 1000 )    

def GWP_box_and_whisk():
    contourplots.box_and_whiskers_plot(uncertainty_data=[1.96520423062229,0.208092922781489,2.39263429582925,0.277224412466555,-0.0373547918001247,0.980297931951116,0.46817991236697,0.444043969671803,1.190026318155,2.1701359405553,1.04809773785033,1.278812261853,0.967055850828761,0.836319092122821,0.937837581136138,-0.375331728850313,-0.488756810997835,0.978345784290129,0.684009762834361,0.445973920333063,-0.147190152659196,1.24768334664005,2.23727474745704,0.787263955884178,-0.0802047987119661,1.15148282222552,0.563954061729138,0.797141782781978,1.60468665980445,-0.0607114704131355,2.79764994154206,1.74624545955316,0.614757130934361,1.36921272409721,0.164789705143685,0.815670381825729,-0.123948575942634,-0.166780417999563,0.118821313637953,1.32272556861842,1.95570165118248,1.06464064982065,0.788173920581315,-0.0361857710651687,0.382381852472289,0.646484131858182,0.407089638817844,-0.711315982265237,1.52294344697904,0.631170191139374,1.05650685169066,1.41894903169371,0.0607726848037089,0.185429852344111,-0.10105713873974,0.586278353060017,0.359076081306817,0.342647004982261,-0.609817504244379,-0.193380262700725,-0.637429641822937,1.31095533607142,-0.294119516282413,-0.268438417221141,1.46597758613721,1.25786271293475,0.611837579850249,1.02000364555976,1.35912390819511,-0.093636347208033,0.841182956400342,1.2836147410903,1.12585793297635,1.66204053193214,-0.106033663530621,0.627390274236367,0.797733550632699,0.966602936072132,1.97518018394832,1.07923907077238,-1.05677858237088,0.65045761272938,1.63751608208177,0.331544905783055,0.365164766361612,1.30529964368457,0.837489076794871,-0.933286909404707,1.29229198010733,0.354084447851694,1.06270435852654,0.427756808610226,1.75928737205504,1.20466117433575,0.188538343086861,-0.576631637498643,0.793475503882377,0.296229492962134,1.50707815103727,1.97447893405631,1.70779705743859,1.35465298860323,1.31870715906026,0.646772881667154,1.42239179710398,0.372669104239101,1.24380445110435,0.951050682303986,0.235849427363256,0.429613593590574,-0.339332711924264,1.09057959050809,-0.0710272576129292,0.0671132626177133,0.285445234443632,-0.339842799414322,0.134952314749842,1.09856273260233,0.230161420108928,0.526005066363412,-0.284873491442248,0.118014636939765,0.119352854071863,-0.540532098602839,0.0735434606927825,0.623383193361294,0.987475921787029,1.34769958047189,0.205743171598229,-0.183148180746729,0.0110620339755805,0.921330091020598,0.985366566008036,0.690091978448672,0.6356524554231,-0.379211729992523,1.06413730877463,0.659904363766033,0.656640892199519,1.46980759509228,1.0698907590079,0.480472044567985,1.05119130781306,-0.0346668750922223,1.93486605888996,0.583094525997964,0.857761529780307,-0.114272429007526,0.701965664233228,1.62299892206525,0.64402827326693,1.1532424415384,2.82124051449935,0.966532844737792,0.497704126434098,1.28096922982126,1.11104506347225,1.33703313087012,1.71404359057232,0.00574255763673293,0.83438363764007,0.325283044727861,0.77845429542684,0.157007135820322,1.42500434458622,1.69684186167843,1.60977924175457,2.3141268723795,0.0753917363100172,0.095655092602394,1.42164151592119,0.535870725493231,0.670593680143647,0.628678254175739,1.09647894524193,1.46699556695447,0.445575382890858,2.48308411618858,0.599484363298199,0.772911221461252,1.10839068730172,1.46513367319286,0.25390102919231,0.433947947644818,1.03835882797086,1.37690633151469,1.85527556537658,1.67744260863876,1.64138208730747,0.194328424060565,0.33935680653536,0.211879517670258,0.616958575592102,0.0862749088850094,1.81798698812936,-0.15224291689251,-0.0395471533448895,1.32156775934606,1.23177539632632,1.14919211699543,1.22073149316222,0.955660617256374,1.15311126395155,1.10875821306779,0.614668445944499,0.990921273597674,1.06675022619549,2.44099879145055,0.448329147050124,0.756084642558024,0.915290337358901,1.58062157226858,1.32154516285424,0.418286427379197,0.852837838468618,1.05299364357567,0.289857950895952,1.75049209208799,-0.0492924111810904,1.21081842129618,-0.271205707222206,1.33826467846742,0.618913921985577,0.664500965665999,2.39309231921901,-0.210791140268762,1.30324067377664,1.18850465942445,1.8250352869564,0.645527725655665,0.143814690492663,1.40868241744156,-0.220658720527142,0.545097130744139,1.10366703028864,1.21831296615954,0.504120647965792,0.172055360580089,1.02228026720885,0.928493191191455,0.859400048454578,1.2012187371535,1.46831558806409,1.28161087755545,1.84163982318088,1.32335234002057,0.637825795196527,1.43371877026408,-0.526686483803356,-0.161584938554455,0.65046420792719,0.870582973893235,-0.131583206257176,-0.227745409112554,0.228989799010874,0.810358868258312,1.3066531856839,0.963341477567393,1.43145516632455,0.777899093863859,1.38738299149552,0.175803842645159,-0.162704308561974,1.2896407875185,1.71980490423099,0.723977084223762,1.61743331161492,1.40839546628991,0.836190847991492,0.499988349328074,1.91973813732848,1.30016756170705,0.649239395549261,0.324151556204988,0.254246514648969,0.782782138649514,0.668810048404513,1.53912534160804,-0.511217573031775,1.84614198312537,0.573991195892329,1.46056317581876,0.139666131380356,0.816593697665194,0.772956764957581,0.979813969507425,0.796545360510333,0.359117112119957,1.57515135839118,1.80388551751999,1.54337168600807,0.460669305548079,0.0690469226534969,0.453763803715859,0.0308051643960852,0.207474956654911,1.08554752718924,1.87491150005842,0.300420626961145,0.534198835023993,1.3565831262574,0.611194572718034,1.31821125802783,0.136049389029747,-1.06487664549563,-0.295092764509963,1.41755456961128,-0.487779655491508,0.896774489296071,0.630940975414575,0.565801298476565,1.39248278164975,-0.116195551356565,-0.481488237038421,-0.418096156725156,1.58723607868055,0.118284828328457,0.782380457711593,1.59026825966007,0.937340836494252,1.15231263427078,1.59083722620995,0.814377579707712,2.03931452523915,0.229938187192353,1.43414171773253,0.768508862328313,1.29785743277774,0.88271695321632,1.17166050700035,0.89046324677796,-0.535687054239538,0.917255242018847,0.674201841902612,1.89563716044168,0.755297338335918,-0.265790461326604,0.424447942427825,1.2714696265917,1.66151095320213,-0.148306074277526,0.571298373516001,0.306588705006998,0.271530279349264,0.508173826845823,1.13486113431222,3.55256607427625,1.01141111723018,0.764383552552102,-0.144446072107062,1.93677027214339,0.751782055492171,1.10691145295402,0.0520237930832046,0.927293116561621,0.81592189609626,0.625552312838643,0.945748037863826,1.43411527678807,0.752988960350898,-0.639206481743267,-0.323310990970478,1.34842700595404,0.598905988619848,0.998951154200242,0.538411765210144,0.227792912500798,1.86726135002403,0.142504132281163,1.69363270458128,0.738921895233403,0.135016084648024,1.68040725282797,0.416164738900017,0.599518158536558,1.60666107330949,1.62055572379578,1.33082738424052,0.872122657481057,2.13749494058002,0.133062072933631,1.03463960771564,0.963748514783401,1.22607458696839,-0.226286220667136,1.66206426582792,0.323648476264289,1.91099685298079,0.663644583677694,1.59233519512246,0.755743681024043,1.1892013194752,1.8639667425167,0.701407592169449,1.60833239203785,0.525274846466377,0.171089270197555,0.350619568801033,-0.508906070794847,0.594370041561639,1.23002977667318,1.74503147099703,1.68936010219704,0.765665778724152,-0.0232224418777491,0.607258751992063,0.704432889686306,0.295815724340674,1.5116222567089,0.758819560281189,0.83997357788361,1.88273412872453,1.6450728962723,0.400921915288018,1.50708113695521,0.826518617366744,0.564526594640377,0.644628822329938,1.13383610495867,0.488991998645588,0.336772281108448,2.36698127311455,0.708045539781978,1.15024496940362,0.626790711227894,2.14384906885447,1.30555005702002,1.42527246343261,2.03865019621208,1.13981424360194,0.835708769496868,0.320927476208869,1.39147862856962,1.23254788458631,2.23518388210786,2.60531148569644,1.04040232855126,0.477774727711692,0.0909754635098103,1.34340153183153,0.113628327988296,1.43909266666665,1.15365681136361,1.42194358720449,0.957815984287961,0.781587270033491,1.72656526371953,1.84183920958706,0.184160055452239,0.750436756261387,0.523237152244283,1.12162564269274,0.529794246419298,1.49776318798446,0.0682932227535815,0.923516965051011,0.37534835695303,1.94207421072309,2.13839926342596,1.0739325705875,1.63016499266741,-0.276652169020146,1.23865187013722,0.1153865386259,1.46787522650713,1.551607463079,1.06097781014579,0.530270689120574,1.07309080870429,2.58042006755959,1.27005038761488,1.26838213822841,1.58093727347686,0.673127854534307,-0.46733377450931,0.318387430907354,0.252079427131262,-0.0277504092981218,2.04512572575011,1.19324085512175,1.00028133311333,0.492701935926682,0.830137161453916,1.08240482215219,0.803530271661625,-0.23206415892539,0.934266972072704,1.42364201390229,1.80506037638055,0.685500231032469,0.538371947516463,1.1666669924449,1.03415536692258,0.459997801531568,1.65894489530175,1.21037334807461,-0.0950868344979554,0.301332355377539,0.465799064626996,0.573160343181431,1.58121012959174,1.00754769794304,1.74089474760427,0.537443135259146,0.416124792920858,-0.133943919605755,0.307404598225016,1.63949159880212,0.343628778814043,1.08340313289806,0.00787657971017985,0.836024476336073,-1.0305894820312,1.47655244212554,1.02064664126972,0.540395911434469,1.10134735425282,0.674350569052972,0.935031032459161,0.160209348049827,0.196929408058612,0.0450000251271039,1.19346062862292,1.6786824092427,1.5445511353666,1.51045969182681,0.804311774794058,0.411126041561339,1.20645982668181,0.431178421661512,2.01775273218782,0.470182898912535,0.78510045846151,1.53820383038029,0.57045764771814,1.75185554110647,0.734850440049225,0.851917640510731,0.192853366243391,-0.306295668808321,1.01249435955775,1.07108123901967,1.34057436290347,0.759936902994927,0.630802881126264,1.18520451818034,0.576852189631698,1.6820603875948,2.18025301544304,1.91874382118077,1.50004990860094,1.84934258447486,0.724081955587156,2.19140035443931,0.698141970477131,0.55461296375988,2.31041562263327,1.05591300821417,0.668700625673925,1.59766089697118,-0.0839056267351346,1.50998116227881,0.932690970125751,1.67622972319975,0.549214672708526,1.74643129882384,2.60399230071081,1.31104362016609,0.337364808112664,0.1375540217972,0.989165352298219,-0.556616794074525,1.04886816986004,1.26027058328053,2.04921104825915,1.34289704283926,1.14221987528014,1.68439168281295,0.144481470233068,1.67478655391525,1.27975844511553,-0.796582665322868,0.398352953727816,0.80133320273368,0.299907541976261,1.02915077868109,2.50405453593355,2.44104331944405,0.764219830078689,-0.480032310863319,0.533531979756489,0.800638366429691,1.36532780180481,1.07421847072349,0.354025505665643,1.27540579736185,1.35851333994191,0.507771703061294,-0.028749445752851,0.497013788115996,0.760496597157857,0.656832937002857,0.0537626934858757,1.00427991789082,0.826579099958774,2.24456903450706,2.44243134011414,2.27974409653753,0.952827730980577,1.87897507599956,0.0389137028516444,0.535823067084975,-0.250422068443965,0.85301229569486,0.969428704243828,1.42879732459331,0.990122328046494,0.55244370412106,1.22687831166712,0.858576868967395,1.92475492600495,0.210330947380736,-0.144656469171935,0.597642577784885,-0.328725406842912,1.89481135350498,2.15899310057777,1.72501320773518,0.093305515891597,1.30743421848994,1.64244518244793,1.62858889628345,1.56065094150292,2.404010514959,-0.442290671932758,0.451444548811347,1.66868685400479,0.564312472153842,0.367564277750873,0.825435062975778,0.226064158839211,1.34732362345588,1.24125048871029,-0.269587174676023,-0.365435205536329,1.01993291854313,0.980817970315314,0.0522231028980826,-0.0632479488058788,-0.347598294309964,0.0150802944071202,1.72956668639438,-0.659636701410562,0.70839789089414,0.186928697463213,-0.215363347138139,2.51245427987514,1.22820564906401,0.296208682202948,1.29986526033161,0.011545893683607,0.704682350927765,0.867421237914769,-0.0763981370017817,0.802889638344931,1.8256645772286,0.466247842260664,0.510114786359734,1.2527519833225,0.798548637535145,0.00716162823361266,0.29850470980098,0.784551396014836,0.644044929115347,0.496054623674382,0.432943624917481,1.74223808578356,0.480760267859957,-0.00346519922087296,1.22981167411194,0.613981132824549,0.36212037219124,0.901364669526998,1.04486032544975,-0.562315810506282,0.546258315263653,1.48390060319619,1.92098344110069,0.97489313948417,0.913349664663038,0.44850234275096,1.18892054445381,1.76208782880442,1.67805498304763,0.703723167259572,0.530274790950742,0.933183560425066,0.554033509311658,1.07644096620344,-0.564020634802363,1.17116285587687,2.36403158615233,1.84501342878288,0.392537826660636,2.13110387020102,1.39748862111186,0.863568614255946,0.404066535690656,1.09909715321554,1.85448321394946,0.998951402012072,0.823336355685139,1.76935007597392,1.02995093753368,0.473621924975888,1.0568381570502,1.13850665807854,1.52767529590758,0.197382220880357,-0.0796605005772619,0.772633469974242,1.83425520961671,1.57286927526226,0.0475938056515197,1.22373456174805,2.29600768966807,0.486907936687075,1.06308999265221,2.15292474196687,0.977700737138733,1.83142596234573,0.636472458898735,1.9820623420289,0.307147278801271,1.21087879619499,0.221091189075537,2.08391702687617,1.85021886470511,0.0903053500385695,0.0416818967071926,1.2615783226096,-0.555554643978736,-0.163586796810723,0.309654085300501,0.829465406698528,1.0723498650155,0.221297233563634,-0.314678040944825,0.939751396326402,0.630578891010327,0.706228440892383,1.07096486546945,0.350015283762676,0.47912938806785,0.422178928238914,1.33893825110557,0.140138314308366,0.956849192802942,-0.668959026621446,-0.439547066039275,0.421328367373542,1.11717315470769,1.46944129085664,0.864982909751616,-0.455455063323379,0.127382797731057,0.0950643655558725,0.370231761568952,0.357789386196117,1.09368359670077,1.73133903418633,1.08055594990589,1.60961451408899,0.454018985459623,-0.37575645938767,0.343586069498045,1.84171004157414,0.142705006894193,0.113478036805706,0.109420742026312,0.648118408733634,-0.305055112331861,1.23081411520681,0.383456164125501,2.11814611680211,0.163867900104201,0.256542051817227,1.85330417456978,-0.753482428552051,0.414778853789704,0.697618444304233,0.250729075899965,-0.304273407537451,0.38206534789947,1.26004993434261,1.08175780562242,0.648670600856725,0.961601135598599,0.168767539163998,-0.0954500636248969,0.473630232041055,0.881062324370749,0.484996936316508,-0.325796992037116,0.786866231485272,0.350849374626495,1.58322910175051,0.839006074561752,1.17395273909349,0.974766896765232,0.0710870753625592,1.90541882459676,0.804841418236283,1.33982657221039,1.11071294786021,0.936069893210352,0.0473818307963061,0.148837484653463,1.68197348005819,0.686634910548406,0.718265630894297,0.808094797670149,0.474819414725037,0.60248075524925,0.882973474938634,0.736049501548099,1.02253945450185,1.32929318182512,0.724367041450501,1.33605645432946,1.59725341967825,0.257014821004741,1.6959244994578,1.34509148972249,1.33450196502028,1.067564589452,0.8392490948768,0.946907520555191,-0.80256243085848,1.18046119991508,0.398276027020065,1.08561746376793,0.835292606827419,-0.126923006392367,1.31812027520362,1.5659366112856,-0.477296879742852,-0.140650521921728,-0.63056305709717,0.444235710068215,0.286115567194779,0.784657529533348,1.60603942236465,1.03589538901477,-0.252994662809119,0.427592209067635,0.000398792727178687,0.672398984988675,-0.644855097979105,0.763118749602482,-0.582940354003302,0.609409996801514,0.481877171344777,-0.577038404756165,0.415548350632934,1.53812196299063,0.145218429745988,0.850198144230934,-0.0964733131346378,0.313678573448048,1.7522205415441,0.74574574988956,0.253516973787033,0.783853559891915,1.54826313812521,0.692063564390498,1.17787007245238,1.75448556617737,-0.269299348731394,0.0334194461176409,0.349686844846026,-0.0914162524052511,0.279960968490645,0.596769270389231,1.03048817612133,0.286516905283662,-0.632002610153908,1.19626818099496,1.5758781100103,0.355731402421473,1.39495838368266,0.12823358564631,0.519475088927766,-0.083754618082498,-0.0733745864552695,0.197954006281519,0.847739605647217,-0.0979735836805098,1.24543706780506,-0.476246464015118,1.01903656777702,-0.852765363817372,-1.01018825034297,1.02699305209605,0.33698964087438,0.254856937876084,1.05645974250397,0.591620832292051,-0.0984804433011632,-0.152413964592208,0.0446484728500955,0.987183677273709,0.930614860791552,-0.479927819920146,0.0284655305528894,0.164879743067601,2.84154728530395,0.729396914252785,1.22685808180562,0.634337303393348,-0.713648304391763,0.825499074862616,0.341808550047364,0.961680626664535,1.12172968398542,-0.654614798733274,0.62281609399127,1.40225476264397,-1.05507010104521,0.229709946111568,0.693694725406925,1.01700221139762,-0.299313382127973,1.26309859861661,-0.0470720477600644,-0.244694917232556,1.17218230408794,0.81900586264414,0.678909013340235,0.420429496729131,0.767437432940547,0.461337601116023,0.0765080174496013,0.756834295228774,1.36285495357433,2.44147521685335,1.98964752738257,2.14341417039305,0.771688321175588,2.22739793348721,1.9955391110942,0.955417764548155,0.396047839835344,0.617762528970161,0.583133880257808,1.76116466516741,0.882063043164074,-0.0887867168517751,1.59327964541831,-0.145794759828743,0.364868193315457,0.558979522423265,0.293252744653282,0.608195375026197,0.494682972091109,1.07474067463271,-0.30388772474025,0.98296383112563,1.09458892019311,0.476734985417021,0.562377090820181,0.439369385283868,1.51111245381933,-0.124302157404145,1.37533869316237,1.91096062264537,1.25660317305493,0.681251596767723,0.558565076003704,0.561057338882453,-0.40224069918459,1.19712567083263,0.779807564727893,-0.0591919192010231,0.308029157706107,1.91150490144335,0.404149974508247,0.197811464788703,1.71944437324817,0.423918739170748,1.48694422648709,0.987668725440683,0.394551860270342,0.938504524519931,0.969491675217677,0.85626921085748,-0.180926210542758,0.850835627090706,1.50541029304765,-0.248058976913814,],
                                       baseline_values= [2.230], 
                                       y_ticks = [-1,0,1,2,3,4],
                                       height_ratios = [1,8],
                                       fig_height=5.0,
                                       dpi = 1000,
                                       boxcolor = colors.brown_tint.RGBn
                                       )

#%% Stacked bar plot

def stacked_plot_across_units(unit_groups = aa_baseline_groups):
    df_unit_groups = bst.UnitGroup.df_from_groups(unit_groups = aa_baseline_groups, fraction=True, 
                                                  scale_fractions_to_positive_values=True)
    df_unit_groups.index = [100,200,300,400,500,600,900,700,800]
                            # 50]
    df_unit_groups = df_unit_groups.sort_index()    
    df_unit_groups.index = [
                            'Transesterification',
                            'Dihydroxylation',
                            'Oxidative cleavage',
                            'Catalyst recovery',
                            'Pelargonic acid and C5-C8 fraction recovery',
                            'Azelaic acid and heavy tails recovery',
                            'Boilerturbogenerator',
                            'Wastewater treatment',
                            'Other Facilities (cooling tower,air distribution and cleaning auxiliaries)',]
    
    
    def get_system_heating_demand(): 
        #The boilerturbogenerator is designed to satisfy all the system heating demand
        total_heating_demand = sum([sum([i.duty for i in unit.heat_utilities
                                         if i.flow > 0 and i.duty > 0])
                                    for unit in aa_baseline.units])*aa_baseline.operating_hours/1e9 #MJ
        return total_heating_demand #10^6*MJ/yr    
    
    def get_system_cooling_demand(): 
        total_heating_demand = -1*sum([sum([i.duty for i in unit.heat_utilities
                                            if i.flow > 0 and i.duty < 0])
                                       for unit in aa_baseline.units])*aa_baseline.operating_hours/1e9 #MJ
        return total_heating_demand #10^6*MJ/yr   
    
    df_unit_groups = df_unit_groups[['Installed equipment cost', 
                                     'Material cost', 'Cooling duty',
                                     'Heating duty', 'Electricity consumption']]     
    df_unit_groups = df_unit_groups.round(1)                      
       
    contourplots.stacked_bar_plot(df_unit_groups, y_ticks = [0,10,20,30,40,50,60,70,80,90,100],fig_width=10,
                     colors =contourplots.utils.defaults_dict['colors']['Guest_Group_TEA_Breakdown'],
                     metric_total_values = [round(bst.get_installed_cost(aa_baseline.units),2),
                                            round(get_system_cooling_demand(),2),
                                            round(get_system_heating_demand(),2),
                                            round(aa_baseline.get_electricity_consumption()*0.001,2),
                                            round(aa_baseline.material_cost/1e6,2)],
                     metric_units = ['10$^6$ $','10$^6$ MJ.h$^-1$','10$^6$ MJ.h$^-1$','MW''10$^6$$.y$^-1$'], dpi = 1500)


    
#%% Perform analysis
#crude_veg_oil
#shortform stream names for ease
azelaic_acid = F.stream.azelaic_acid_product_stream
recovered_C5_to_C9_MCA_fraction = F.stream.recovered_C5_to_C9_MCA_fraction
pelargonic_acid_rich_fraction = F.stream.pelargonic_acid_rich_fraction
fatty_acid_blend = F.stream.fatty_acid_blend
crude_methanol = F.stream.crude_methanol
crude_glycerol = F.stream.crude_glycerol
crude_vegetable_oil = F.stream.crude_vegetable_oil 
fresh_tungsten_catalyst = F.stream.fresh_tungsten_catalyst
fresh_cobalt_catalyst = F.stream.fresh_cobalt_catalyst_stream
fresh_solvent = F.stream.solvent_for_extraction
fresh_HP = F.stream.fresh_HP
polystyrene_based_catalyst = F.stream.polystyrene_based_catalyst
conc_hydrochloric_acid = F.stream.conc_hydrochloric_acid
calcium_chloride = F.stream.calcium_chloride_for_cat_sep
Resin = F.stream.polystyrene_based_catalyst
Liquid_HCl = F.stream.Liquid_HCl
natural_gas = F.stream.natural_gas

#based on uncertainity analysis ranges models.table
# fatty_acid_blend_price = np.linspace(0.4,1.32,10)#based on uncertainity analysis ranges models.table
# tungstic_acid_moles = np.linspace(0.01/100,6/100,10)#TODO; 
# tungstic_acid_reusability = np.linspace(1,10,10)
# air_mass_fac = np.linspace(1.3,2.5,10)
# y_data= oxidative_cleavage_reaction = np.linspace(0.80,0.98,15)
# oxidative_cleavage_reaction_1 = np.linspace(0.80,0.98,15)


# oxidative_cleavage_reaction_1
# x_data = crude_vegetable_oil_price = np.linspace(1,3,15)
y_data = dih = np.linspace(0.78,0.98,15)
x_data = pelargonic_acid_price = np.linspace(3,8,15)
# y_data = oxidative_cleavage_reaction_1 = np.linspace(0.10,0.90,15)
# x_data = aa_price = np.linspace(2,12,15)


# y_data = hydrogen_peroxide_price = np.linspace(1,2,15) 

# oxidative_cleavage_reaction
w_data = []

def MPSP_at_x_and_y(x,y):  
    # total_fatty_acid_mass = 98
    # crude_vegetable_oil.price = x
    pelargonic_acid_rich_fraction.price = x
    # azelaic_acid.price = x
    # F.unit.S611.specifications[0].args[0]  = y
    # fresh_HP.price = y   
    # F.R200.X_dih = y
    # F.unit.M200.specifications[0].args[0] = y
    # F.unit.M200.specifications[0].args[1] = x
    # F.unit.R300.X_ox_rxn_1 = y
    F.unit.R300.X_oxidativecleavage = y
    # F.unit.R200.X_dih = y
    # F.unit.R300.specifications[0].args[2] = y
    try:
        aa_baseline.simulate()
    except Exception:
        # crude_vegetable_oil.price = x
        # F.unit.R200.X_dih = y
        # fresh_HP.price = y   
        # F.unit.R300.X_ox_rxn_1 = y
        # pelargonic_acid_rich_fraction.price = y
        
        # azelaic_acid.price = x
        pelargonic_acid_rich_fraction.price = x
        # F.unit.S611.specifications[0].args[0]  = y
        # F.unit.R300.X_ox_rxn_1 = y
        F.unit.R300.X_oxidativecleavage = y
        # pelargonic_acid_rich_fraction.price = y
        aa_baseline.simulate()
    # AOC = azelaic_acid_tea.AOC/1e6
    # azelaic_acid.price  = 0
    MFPP = azelaic_acid_tea.solve_price(crude_vegetable_oil)
    # MPSP = azelaic_acid.price = azelaic_acid_tea.solve_price(azelaic_acid)
    # Econ_all_AA_GWP = get_economic_based_AA_GWP()
    return MFPP
# MPSP

# ##for each y you vary the x
for j in y_data:
    w_data.append([])
    for i in x_data:
        print(MPSP_at_x_and_y(i,j))
        w_data[-1].append(MPSP_at_x_and_y(i,j))
        
# %% Plot results


z_data = [1,]
contourplots.animated_contourplot(w_data_vs_x_y_at_multiple_z=[w_data], # shape = z * x * y # values of the metric you want to plot on the color axis; e.g., MPSP
                                    x_data=x_data,# x axis values
                                    y_data=y_data, # y axis values
                                    z_data=z_data, # z axis values
                                    x_label= "Pelargonic acid price",
                                    # "Oxidative reaction conversion (intermediate to product)",
                                    y_label= "Oxidative reaction conversion (intermediate to product)",
                                    # Oxidative reaction conversion (intermediate to product)",
                                    # "Oxidative reaction conversion (intermediate to product)",
                                    # "Oxidative reaction conversion  ",
                                    z_label= "ignore", # title of the z axis
                                    w_label="Maximum feedstock purchase price", # tiecotle of the color axis
                                    x_ticks= 
                                    # [2,3,4,5,6,7,8,9,10,11,12],
                                    [3,3.5,4,4.5,5,5.5,6,6.5,7,7.5,8],
                                    # [1,1.25,1.5,1.75,2,2.25,2.5,2.75,3],
                                    # [3,3.5,4,4.5,5,5.5,6,6.5,7,7.5,8],
                                    # [0.80,0.82,0.84,0.86,0.88,0.90,0.92,0.94,0.96,0.98],
                                    # np.round(x_data,3),
                                    y_ticks=  
                                    # [1,1.1,1.2,1.3,1.4,1.5,1.6,1.7,1.8,1.9,2.0],
                                    # [1,2,3,4,5,6,7,8,9,10,11],
                                    # [7,7.5,8,8.5,9,9.5,10,10.5,11,11.5,12],
                                    # [3,3.5,4,4.5,5,5.5,6,6.5,7,7.5,8],
                                    # y_ticks = [1,1.1,1.2,1.3,1.4,1.5,1.6,1.7,1.8,1.9,2.0],
                                    
                                    [0.78,0.80,0.82,0.84,0.86,0.88,0.90,0.92,0.94,0.96,0.98],
                                    # np.linspace(0.86,0.99,14),
                                    # np.round(y_data,3),
                                    z_ticks=[0,1,2],
                                    w_levels= [i for i in range(2,6)],
                                    w_ticks= [i for i in range(2,6)],
                                    x_units="$/kg",
                                    y_units="%",
                                    z_units=" ",
                                    w_units="$/kg",
                                    fmt_clabel=lambda cvalue: "{:.1f}".format(cvalue), # format of contour labels
                                    cmap=CABBI_green_colormap(), # can use 'viridis' or other default matplotlib colormaps
                                    cbar_ticks= [i for i in range(2,6)],
                                    clabel_fontsize = 7,
                                    z_marker_color='g', # default matplotlib color names
                                    axis_title_fonts={'size': {'x': 9, 'y':9,
                                                                'z':7, 'w':9}},
                                    fps=3, # animation frames (z values traversed) per second
                                    n_loops='inf', # the number of times the animated contourplot should loop animation over z; infinite by default
                                    animated_contourplot_filename='MPSP_contourplot_', # file name to save animated contourplot as (no extensions)
                                    keep_frames=True, # leaves frame PNG files undeleted after running; False by default
                                    )

# %% Feedstock composition variation

ooo = np.linspace(75,85,11,dtype = int)
lll = np.linspace(10,1,10,dtype = int)
lnlnln = np.linspace(9,1,9,dtype = int)
ppp = np.linspace(8,4,5,dtype = int)
sss = np.linspace(6,2,5, dtype = int)


tag = []
for o in ooo:
    tag.append([])
    for p in ppp:
        for l in lll:
            for s in sss:
                for ln in lnlnln:
                    sumi = o+p+l+ln+s
                    if int(sumi) == 98:
                        tag[-1].append({'PPP':p,'SSS':s,'OOO':o,'LLL':l,'LnLnLn':ln})
                        
                        
MFPP_ = []    
k = 0
for i in range(len(tag[k])):
    try:
        crude_vegetable_oil.imass['PPP'] = tag[k][i]['PPP']
        crude_vegetable_oil.imass['SSS'] = tag[k][i]['SSS']
        crude_vegetable_oil.imass['LLL'] = tag[k][i]['LLL']
        crude_vegetable_oil.imass['LnLnLn'] = tag[k][i]['LnLnLn']
        crude_vegetable_oil.imass['OOO'] = tag[k][i]['OOO']
        crude_vegetable_oil.imass['PL']= 0
        crude_vegetable_oil.imass['MAG']=0
        crude_vegetable_oil.imass['DAG']=0
        crude_vegetable_oil.imass['Water']=2-0.03
        crude_vegetable_oil.imass['Oleic_acid']=0.03
        crude_vegetable_oil.F_mass = 2400
        aa_baseline.simulate()
        # MPSP = azelaic_acid.price = azelaic_acid_tea.solve_price(azelaic_acid)
        # MPSP_1.append(MPSP)
        MFPP = azelaic_acid_tea.solve_price(crude_vegetable_oil)
        MFPP_.append(MFPP)
    except Exception:
    # This block will run if there is an error in the try block
        MFPP_.append(0)
    i = i+1
    
LnLnLn = []
for i in range(len(tag[k])):
    LnLnLn.append(tag[k][i]['LnLnLn'])
    i = i+1    
SSS = []
for i in range(len(tag[k])):
    SSS.append(tag[k][i]['SSS'])
    i = i+1
PPP = []
for i in range(len(tag[k])):
    PPP.append(tag[k][i]['PPP'])
    i = i+1
LLL = []
for i in range(len(tag[k])):
    LLL.append(tag[k][i]['LLL'])
    i = i+1
    
OOO = []
for i in range(len(tag[k])):
    OOO.append(tag[k][i]['OOO'])
    i = i+1    
    
col1 = "P"
col2 = "S"
col3 = "L"
col4 = "Ln"
col5 = "O"
col6 = "MFPP"

data = pd.DataFrame({col1: PPP, 
                     col2: SSS,
                     col3: LLL,
                     col4: LnLnLn,
                     col5: OOO,
                     col6: MFPP_
                      })
o_name = str(OOO[0])
data.to_excel("O_75.xlsx", sheet_name=o_name, index=False)    
# %% plotting feedstock variation



# Load the data from the Excel file
file_path = 'just tag composition data.xlsx'
sheet_name = '85'
df = pd.read_excel(file_path, sheet_name=sheet_name)

# Remove rows with NaN values in 'P' to avoid plotting issues
df = df.dropna(subset=['P'])

# Get unique values of P excluding NaN
unique_p_values = df['P'].unique()
GG_colors = Palette(
    blue = colors.blue,    
    purple = colors.purple,
    red = colors.red,
    orange = colors.orange,
    yellow = colors.yellow,
    green = colors.green,
)
color_dict = {1:GG_colors.blue.RGBn,2:GG_colors.red.RGBn,3:GG_colors.purple.RGBn,
              4:GG_colors.orange.RGBn,
              5:GG_dark_colors.yellow.RGBn,6:GG_colors.green.RGBn,7:GG_colors.orange.RGBn,
              8:GG_dark_colors.orange.RGBn,
              9:GG_dark_colors.green.RGBn,
              10:GG_dark_colors.red.RGBn} #TODO: put values
# Create subplots side by side for each unique value of P
fig, axs = plt.subplots(1, len(unique_p_values), figsize=(32, 7))
plt.rcParams.update({'font.size': 16})  # Increase the font size

legend_dict = {}  # Initialize an empty dictionary for legend

for i, p_value in enumerate(unique_p_values):
    df_filtered = df[df['P'] == p_value]
    unique_l_values = df_filtered['L'].unique()

    for l_value in unique_l_values:
        df_filtered_l = df_filtered[df_filtered['L'] == l_value]
        scatter = axs[i].scatter(df_filtered_l['Ln'], df_filtered_l['MPSP'], 
                                 label=f'%L = {l_value}',color=color_dict[l_value])

        # Add the handles and labels of each scatter plot to the dictionary
        legend_dict[f'%L = {l_value}'] = scatter
        #for a line graph below added
        # axs[i].plot(df_filtered_l['Ln'], df_filtered_l['MPSP'], color=color_dict[l_value], linestyle=':')
        
    axs[i].set_title(f'%P = {p_value}')
    axs[i].set_xlabel('%Ln')    
    if i == 0:
        axs[i].set_ylabel('MPSP[$/kg]')

    axs[i].set_xlim(0, 9.5)  # Adjust X-axis to ensure dots lie inside the frame
    axs[i].set_ylim(9.8, 10)  # Set the y-axis limits to be between 9.8 and 10
    axs[i].set_xticks(np.arange(0, 10, 1))  # Ensure all integers from 0 to 10 are shown
    axs[i].set_yticks(np.arange(9.6, 11.2, 0.1))  # Ensure all values from 9.8 to 10 are shown

# Create a legend for the whole figure
# for int
# sorted_legend_dict = dict(sorted(legend_dict.items(), key=lambda item: int(item[0].split('=')[1].strip())))
#for float
sorted_legend_dict = dict(sorted(legend_dict.items(), key=lambda item: float(item[0].split('=')[1].strip())))
fig.legend(sorted_legend_dict.values(), sorted_legend_dict.keys(), loc='right',bbox_to_anchor=(1.06, 0.5))

plt.suptitle('Impact of change in %L and %Ln on MPSP[$/kg] at constant 85% O at different %P')
plt.tight_layout()
plt.show()

#%%# Code to plot all Ln and MPSP
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns

# Load the data from the first sheet
sheet_name = 'Sheet1'
df = pd.read_excel('tag comps 2.xlsx', sheet_name=sheet_name)

# Plotting
plt.figure(figsize=(10, 6))
sns.scatterplot(data=df, x='Ln', y='MPSP', alpha=0.6)

# Calculate and plot median MPSP values for each Ln value
medians = df.groupby('Ln')['MPSP'].median().reset_index()
sns.lineplot(data=medians, x='Ln', y='MPSP', marker='o', color='red', label='Median MPSP')

plt.xlabel('Ln')
plt.ylabel('MPSP')
plt.title('MPSP vs. Ln with Median MPSP Values')
plt.legend()
plt.grid(True)
plt.show()

#25h and 75th percentile
# Calculate and plot 25th and 75th percentile MPSP values for each Ln value
percentiles_25 = df.groupby('Ln')['MPSP'].quantile(0.25).reset_index()
percentiles_75 = df.groupby('Ln')['MPSP'].quantile(0.75).reset_index()

plt.figure(figsize=(12, 8))
sns.scatterplot(data=df, x='Ln', y='MPSP', alpha=0.6)

# Plotting median
sns.lineplot(data=medians, x='Ln', y='MPSP', marker='o', color='red', label='Median MPSP')

# Plotting 25th percentile
sns.lineplot(data=percentiles_25, x='Ln', y='MPSP', marker='o', color='blue', label='25th Percentile MPSP')

# Plotting 75th percentile
sns.lineplot(data=percentiles_75, x='Ln', y='MPSP', marker='o', color='green', label='75th Percentile MPSP')

plt.xlabel('Ln')
plt.ylabel('MPSP')
plt.title('MPSP vs. Ln with Median, 25th, and 75th Percentile MPSP Values')
plt.legend()
plt.grid(True)
plt.show()

#%% # plotting all MPSPs vs O value
import matplotlib.pyplot as plt
import numpy as np
import pandas as pd

def read_all_sheets_from_excel(path: str) -> dict:
    xls = pd.ExcelFile(path)
    df_dict = {}
    for sheet_name in xls.sheet_names:
        df_dict[sheet_name] = pd.read_excel(xls, sheet_name)
    return df_dict

dataframes = read_all_sheets_from_excel('MFPP_combos.xlsx')

# print each dataframe name
print("Dataframes in this file:", ", ".join(dataframes.keys()))

for k, v in dataframes.items():
    # strip whitespace where possible from column names; need to check if isinstance(x, str) because some column names are numbers
    try:
        v = v.rename(columns=lambda x: x.strip() if isinstance(x, str) else x)
    except:
        pass

    # strip whitespace where possible from cells
    try:
        v = v.apply(lambda col: col.str.strip() if col.dtype == "object" else col)
    except:
        pass
    dataframes[k] = v
    print(v.head())


defaults_dict ={'colors':
                {'Guest_Group_TEA_Breakdown': ['#7BBD84', '#F7C652', '#63C6CE', '#94948C', '#734A8C', '#D1C0E1', '#648496', '#B97A57', '#D1C0E1', '#F8858A', '#F8858A', ]}}

 
def plot_mpsp_vs_o(dataframes):
    relevant_sheets = [str(i) for i in range(75, 86)]  # Sheets from 75 to 85
    df_list = [dataframes[sheet] for sheet in relevant_sheets if sheet in dataframes]
    combined_df = pd.concat(df_list)
    
    # Plotting
    plt.figure(figsize=(10, 6))
    plt.scatter(combined_df['S'], combined_df['MFPP'], c='#B97A57', alpha=0.5)
    
    # Calculating and plotting median values
    median_values = combined_df.groupby('S')['MFPP'].median().reset_index()
    plt.plot(median_values['S'], median_values['MFPP'], marker='o', color='#F7C652', label='Median MPSP')
    
    # Calculate the slope of the median line
    slope, _ = np.polyfit(median_values['S'], median_values['MFPP'], 1)
    
    # Display the slope on the plot
    plt.text(0.066*13.1, 0.94, f'Slope: {slope:.2f}', transform=plt.gca().transAxes, verticalalignment='top')
    
    plt.xlabel('S wt.% ')
    plt.xticks(np.arange(min(combined_df['S']), max(combined_df['S'])+1, 1.0))  
    plt.yticks(np.arange(1,5,1)) 
    plt.ylabel('MFPP $\u00B7kg\u207B\u00B9')
    plt.title('MFPP $\u00B7kg\u207B\u00B9 vs S wt.%')
    plt.legend(frameon = False, bbox_to_anchor=(0.2*5,1))
    plt.show()
    
plot_mpsp_vs_o(dataframes)



