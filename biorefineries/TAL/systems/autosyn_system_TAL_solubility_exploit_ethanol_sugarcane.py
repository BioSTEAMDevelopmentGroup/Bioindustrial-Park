#!/usr/bin/env python3
# -*- coding: utf-8 -*-
# Bioindustrial-Park: BioSTEAM's Premier Biorefinery Models and Results
# Copyright (C) 2021-, Sarang Bhagwat <sarangb2@illinois.edu>
# 
# This module is under the UIUC open-source license. See 
# github.com/BioSTEAMDevelopmentGroup/biosteam/blob/master/LICENSE.txt
# for license details.
"""
This module is a modified implementation of modules from the following:
[1]	Bhagwat et al., Sustainable Production of Acrylic Acid via 3-Hydroxypropionic Acid from Lignocellulosic Biomass. ACS Sustainable Chem. Eng. 2021, 9 (49), 16659–16669. https://doi.org/10.1021/acssuschemeng.1c05441
[2]	Li et al., Sustainable Lactic Acid Production from Lignocellulosic Biomass. ACS Sustainable Chem. Eng. 2021, 9 (3), 1341–1351. https://doi.org/10.1021/acssuschemeng.0c08055
[3]	Cortes-Peña et al., BioSTEAM: A Fast and Flexible Platform for the Design, Simulation, and Techno-Economic Analysis of Biorefineries under Uncertainty. ACS Sustainable Chem. Eng. 2020, 8 (8), 3302–3310. https://doi.org/10.1021/acssuschemeng.9b07040

All units are explicitly defined here for transparency and easy reference.
Naming conventions:
    D = Distillation column
    C = Crystallization
    AC = Adsorption column
    F = Flash tank or multiple-effect evaporator
    H = Heat exchange
    M = Mixer
    P = Pump (including conveying belt)
    R = Reactor
    S = Splitter (including solid/liquid separator)
    T = Tank or bin for storage
    U = Other units
Processes:
    100: Feedstock preprocessing
    200: Feedstock pretreatment and juicing
    300: Conversion
    400: Separation
    500: Wastewater treatment
    600: Storage
    700: Co-heat and power
    800: Cooling utility generation
    900: Miscellaneous facilities
    1000: Heat exchanger network

"""


# %% Setup


import biosteam as bst
import thermosteam as tmo
import flexsolve as flx
import contourplots
from thermosteam import Stream
from biorefineries.TAL import units

from biorefineries.TAL.models._process_specification import ProcessSpecification
# from biorefineries.TAL.models._general_process_specification import GeneralProcessSpecification

from biorefineries.TAL.process_settings import price, CFs, chem_index
# from biorefineries.TAL.utils import find_split, splits_df, baseline_feedflow
from biorefineries.TAL.chemicals_data import TAL_chemicals, chemical_groups, \
                                soluble_organics, combustibles
# from biorefineries.TAL.tea import TALTEA
from biorefineries.TAL.tea import TALTEA
from biosteam import SystemFactory
from warnings import filterwarnings

from biorefineries.cellulosic import create_facilities
from biorefineries.sugarcane import create_juicing_system_up_to_clarification
from biorefineries.TAL.process_areas import create_TAL_fermentation_process,\
                        create_TAL_separation_solubility_exploit_process,\
                        create_TAL_to_sorbic_acid_upgrading_process

from biorefineries.TAL._general_utils import call_all_specifications_or_run,\
                                                get_more_unit_groups,\
                                                add_metrics_to_unit_groups,\
                                                set_production_capacity,\
                                                TEA_breakdown,\
                                                update_facility_IDs

from biorefineries.TAL.lca import TALLCA

import autosynthesis

filterwarnings('ignore')
IQ_interpolation = flx.IQ_interpolation
HeatExchangerNetwork = bst.HeatExchangerNetwork

Rxn = tmo.reaction.Reaction
ParallelRxn = tmo.reaction.ParallelReaction

# # Do this to be able to show more streams in a diagram
flowsheet = bst.Flowsheet('TAL')
bst.main_flowsheet.set_flowsheet(flowsheet)

# Speeds up ShortcutDistillation
bst.units.ShortcutColumn.minimum_guess_distillate_recovery = 0

# Baseline cost year is 2016
# bst.CE = 541.7

# Baseline cost year is 2019
bst.CE = 607.5

# Set default thermo object for the system
tmo.settings.set_thermo(TAL_chemicals)

# sc_temp = create_juicing_system_up_to_clarification()

# wwt_temp = bst.create_high_rate_wastewater_treatment_system(
#     ins=0-sc_temp, 
#     )
feedstock_ID = 'Sugarcane'


# %% 

# =============================================================================
# Complete system
# =============================================================================

TAL_sys = autosynthesis.process_blocks.get_system_block_based(feedstock='sugarcane', product='TAL')

TAL_sys.set_tolerance(mol=1e-3, rmol=1e-3, subsystems=True)

f = bst.main_flowsheet
u = f.unit
s = f.stream

feedstock = s.sugarcane
TAL_product = u.P617.outs[0]
get_flow_tpd = lambda: (feedstock.F_mass-feedstock.imass['H2O'])*24/907.185

for ui in u:
    globals().update({ui.ID: ui})

update_facility_IDs(TAL_sys)

BT = u.BT701
CT = u.CT801
CWP = u.CWP802
CWP2 = u.CWP803
HXN = u.HXN1001


globals().update(flowsheet.to_dict())

# %%
# =============================================================================
# TEA
# =============================================================================

get_flow_dry_tpd = lambda: (feedstock.F_mass-feedstock.imass['H2O'])*24/907.185
TAL_tea = TALTEA(system=TAL_sys, IRR=0.10, duration=(2019, 2049),
        depreciation='MACRS7', income_tax=0.21, 
        operating_days = 180,
        lang_factor=None, construction_schedule=(0.08, 0.60, 0.32),
        startup_months=3, startup_FOCfrac=1, startup_salesfrac=0.5,
        startup_VOCfrac=0.75, WC_over_FCI=0.05,
        finance_interest=0.08, finance_years=10, finance_fraction=0.4,
        # biosteam Splitters and Mixers have no cost, 
        OSBL_units=(
                    u.U501,
                    # u.T601, u.T602, 
                    # u.T601, u.T602, u.T603, u.T604,
                    # u.T606, u.T606_P,
                    u.BT701, u.CT801, u.CWP802, u.CWP803, u.CIP901, u.ADP902, u.FWT903, u.PWC904,
                    ),
        warehouse=0.04, site_development=0.09, additional_piping=0.045,
        proratable_costs=0.10, field_expenses=0.10, construction=0.20,
        contingency=0.10, other_indirect_costs=0.10, 
        labor_cost=3212962*get_flow_dry_tpd()/2205,
        labor_burden=0.90, property_insurance=0.007, maintenance=0.03,
        steam_power_depreciation='MACRS20', boiler_turbogenerator=u.BT701)

TAL_no_BT_tea = TAL_tea

#%%
# =============================================================================
# LCA
# =============================================================================

TAL_lca = TALLCA(system=TAL_sys, 
                 CFs=CFs, 
                 feedstock=feedstock, 
                 feedstock_ID=feedstock_ID,
                 main_product=TAL_product, 
                 main_product_chemical_IDs=['TAL',], 
                 by_products=[], 
                 cooling_tower=u.CT801, 
                 chilled_water_processing_units=[u.CWP802, u.CWP803], 
                 boiler=u.BT701, has_turbogenerator=True,
                 add_EOL_GWP=True,
                 input_biogenic_carbon_streams=(feedstock, s.CSL),
                 )
# TAL_sys.LCA = TAL_lca

#%% Define unit groups and their metrics


feedstock_acquisition_group = bst.UnitGroup('feedstock acquisition', units=[u.U101])
feedstock_juicing_group = f.juicing_sys.to_unit_group('feedstock juicing')
fermentation_group = f.TAL_fermentation_process.to_unit_group('fermentation')
separation_group = f.TAL_separation_solubility_exploit_process.to_unit_group('separation')
separation_group.units.extend([u.S403, u.H420])
# upgrading_group = bst.UnitGroup('upgrading')


unit_groups = [
    feedstock_acquisition_group,
    feedstock_juicing_group,
    fermentation_group,
    separation_group,
    # upgrading_group,
    ]

unit_groups += get_more_unit_groups(system=TAL_sys,
                         groups_to_get=['wastewater',
                                        'storage & other facilities',
                                        'boiler & turbogenerator',
                                        'cooling utility facilities',
                                        'other facilities',
                                        'heat exchanger network',
                                        # 'natural gas (for steam generation)',
                                        'natural gas (for product drying)',
                                        # 'chilled brine',
                                        'fixed operating cost',
                                        'electricity consumption',
                                        'heating duty',
                                        'excess electricity',
                                        ]
                         )


add_metrics_to_unit_groups(unit_groups=unit_groups, system=TAL_sys, TEA=TAL_tea, LCA=TAL_lca)

unit_groups_dict = {}
for i in unit_groups:
    unit_groups_dict[i.name] = i

cooling_facilities_unit_group = unit_groups_dict['cooling utility facilities']

for i in cooling_facilities_unit_group.metrics:
    if i.name.lower() in ('electricity consumption', 'power consumption',):
        i.getter = lambda: sum([ui.power_utility.rate for ui in cooling_facilities_unit_group.units])/1e3

# %% 
# =============================================================================
# Simulate system and get results
# =============================================================================

try: TAL_sys.simulate()
except: pass

def get_TAL_MPSP():
    for i in range(3):
        TAL_sys.simulate()
    for i in range(3):
        TAL_product.price = TAL_tea.solve_price(TAL_product)
    return TAL_product.price*TAL_product.F_mass/TAL_product.imass['TAL']

theoretical_max_g_TAL_per_g_SA = TAL_chemicals.TAL.MW/TAL_chemicals.SorbicAcid.MW

theoretical_max_g_TAL_per_g_glucose = 2*TAL_chemicals.TAL.MW/(3*TAL_chemicals.Glucose.MW)

theoretical_max_g_TAL_per_g_acetic_acid = 0.22218*TAL_chemicals.TAL.MW/(TAL_chemicals.AceticAcid.MW)

g_sodium_acetate_to_g_acetic_acid = TAL_chemicals.AceticAcid.MW/TAL_chemicals.SodiumAcetate.MW

# fermentation_yield_lower_limit = 0.163/theoretical_max_g_TAL_per_g_glucose # lowest yield with acetate spike reported in Markham et al. 2018
fermentation_yield_baseline = 35.9/(180.*theoretical_max_g_TAL_per_g_glucose+13.7*g_sodium_acetate_to_g_acetic_acid*theoretical_max_g_TAL_per_g_acetic_acid) # from Markham et al. 2018; 35.9 g-TAL/L from 180 g-glucose/L and 13.7 g-sodium_acetate/L
# fermentation_yield_upper_limit = 0.203/theoretical_max_g_TAL_per_g_glucose

desired_annual_production = (23_802/2) * theoretical_max_g_TAL_per_g_SA # pure metric ton / y # satisfy 50% of 2019 US demand for sobic acid with 100% TAL->sorbic acid conversion

# desired_annual_production = (23_802) * theoretical_max_g_TAL_per_g_SA # pure metric ton / y # satisfy 100% of 2019 US demand for sobic acid with 100% TAL->sorbic acid conversion

spec = ProcessSpecification(
    evaporator = u.F301,
    pump = None,
    mixer = u.M304,
    heat_exchanger = u.M304_H,
    seed_train_system = [],
    seed_train = u.R303,
    reactor= u.R302,
    reaction_name='fermentation_reaction', # pure metric ton / y
    substrates=('Xylose', 'Glucose'),
    products=('TAL',),
    
    desired_annual_production = desired_annual_production, 
    
    spec_1=fermentation_yield_baseline, # from Markham et al. 2018; 35.9 g-TAL/L from 180 g-glucose/L and 13.7 g-sodium_acetate/L
    spec_2=35.9, # from Markham et al. 2018
    spec_3=0.12, # from Markham et al. 2018

    
    xylose_utilization_fraction = 0.80,
    feedstock = feedstock,
    dehydration_reactor = None,
    byproduct_streams = [],
    HXN = u.HXN1001,
    maximum_inhibitor_concentration = 1.,
    # pre_conversion_units = process_groups_dict['feedstock_group'].units + process_groups_dict['pretreatment_group'].units + [u.H301], # if the line below does not work (depends on BioSTEAM version)
    # pre_conversion_units = TAL_sys.split(u.M304.ins[0])[0],
    pre_conversion_units = [],
    
    # (ranges from Cao et al. 2022)
    # baseline_yield = 0.0815/theoretical_max_g_TAL_per_g_glucose, # mean of 0.074 and 0.089 g/g (range from Cao et al. 2022)
    # baseline_titer = 25.5, # mean of 23 and 28 g/L (range from Cao et al. 2022)
    # baseline_productivity = 0.215, # mean of 0.19 and 0.24 g/L/h (range from Cao et al. 2022)
    
    
    # !!! set baseline fermentation performance here
    baseline_yield = fermentation_yield_baseline, # from Markham et al. 2018; 35.9 g-TAL/L from 180 g-glucose/L and 13.7 g-sodium_acetate/L
    baseline_titer = 35.9, # from Markham et al. 2018
    baseline_productivity = 0.12, # from Markham et al. 2018
    
    
    tolerable_HXN_energy_balance_percent_error = 2.,
    
    feedstock_mass = feedstock.F_mass,
    pretreatment_reactor = None)


spec.load_spec_1 = spec.load_yield
# spec.load_spec_2 = spec.load_titer
spec.load_spec_3 = spec.load_productivity

def clear_units(units_to_clear):
    for i in units_to_clear:
        for j in list(i.ins)+list(i.outs):
            j.empty()
        i.simulate()
        
    
def M304_titer_obj_fn(water_to_sugar_mol_ratio):
    M304.water_to_sugar_mol_ratio = water_to_sugar_mol_ratio
    call_all_specifications_or_run([M304, M304_H, S302, R303, T301, R302, 
                                    V301, K301,
                                    ])
    return R302.effluent_titer - R302.titer_to_load

def F301_titer_obj_fn(V):
    F301.V = V
    call_all_specifications_or_run([F301, F301_P,
                                    H301, 
                                    M304, M304_H, S302, R303, T301, R302, 
                                    V301, K301,
                                    ])
    return R302.effluent_titer - R302.titer_to_load

def load_titer_with_glucose(titer_to_load, set_F301_V=0.8):
    # clear_units([V301, K301])
    F301_ub = 0.8
    F301_lb = 0. if set_F301_V is None else set_F301_V
    M304_lb, M304_ub = 0., 20000.  # for low-titer high-yield combinations, if infeasible, use a higher upper bound
    
    R302.acetate_target_loading = R302.acetate_target_loading_default
    spec.spec_2 = titer_to_load
    R302.titer_to_load = titer_to_load
    
    F301_titer_obj_fn(F301_lb)
        
    if M304_titer_obj_fn(M304_lb) < 0.: # if there is too low a conc even with no dilution
        IQ_interpolation(F301_titer_obj_fn, F301_lb, F301_ub, ytol=1e-3)
    # elif F301_titer_obj_fn(1e-4)>0: # if the slightest evaporation results in too high a conc
    elif M304_titer_obj_fn(M304_ub) > 0.:
        R302.acetate_target_loading = spec.spec_2
        IQ_interpolation(M304_titer_obj_fn, 
                         M304_lb,
                         M304_ub, 
                         ytol=1e-3)
    else:
        F301_titer_obj_fn(F301_lb)
        IQ_interpolation(M304_titer_obj_fn, 
                         M304_lb, 
                         M304_ub, 
                         ytol=1e-3)

    if set_F301_V is None: spec.titer_inhibitor_specification.check_sugar_concentration()

spec.load_spec_2 = load_titer_with_glucose

# %% Full analysis
per_kg_KSA_to_per_kg_SA = TAL_chemicals.PotassiumSorbate.MW/TAL_chemicals.SorbicAcid.MW

production_capacity_is_fixed = True
def simulate_and_print():
    if production_capacity_is_fixed: spec_set_production_capacity(spec.desired_annual_production, method='analytical')
    # set_production_capacity(25000, 'analytical')
    print('\n---------- Simulation Results ----------')
    MPSP_KSA = get_TAL_MPSP()
    print(f'MPSP is ${MPSP_KSA:.3f}/kg TAL')
    # print(f'.... or ${MPSP_KSA*per_kg_KSA_to_per_kg_SA:.3f}/kg SorbicAcid')
    GWP_KSA, FEC_KSA = TAL_lca.GWP, TAL_lca.FEC
    print(f'GWP-100a is {GWP_KSA:.3f} kg CO2-eq/kg TAL')
    # print(f'........ or {GWP_KSA*per_kg_KSA_to_per_kg_SA:.3f} kg CO2-eq/kg SorbicAcid')
    print(f'FEC is {FEC_KSA:.3f} MJ/kg TAL')
    # print(f'... or {FEC_KSA*per_kg_KSA_to_per_kg_SA:.3f} MJ/kg SorbicAcid')
    GWP_KSA_without_electricity_credit, FEC_KSA_without_electricity_credit =\
        GWP_KSA - TAL_lca.net_electricity_GWP, FEC_KSA - TAL_lca.net_electricity_FEC
    print(f'GWP-100a without electricity credit is {GWP_KSA_without_electricity_credit:.3f} kg CO2-eq/kg TAL')
    # print(f'................................... or {GWP_KSA_without_electricity_credit*per_kg_KSA_to_per_kg_SA:.3f} kg CO2-eq/kg SorbicAcid')
    print(f'FEC without electricity credit is {FEC_KSA_without_electricity_credit:.3f} MJ/kg TAL')
    # print(f'.............................. or {FEC_KSA_without_electricity_credit*per_kg_KSA_to_per_kg_SA:.3f} MJ/kg SorbicAcid')
    # print(f'FEC is {get_FEC():.2f} MJ/kg TAL or {get_FEC()/TAL_LHV:.2f} MJ/MJ TAL')
    # print(f'SPED is {get_SPED():.2f} MJ/kg TAL or {get_SPED()/TAL_LHV:.2f} MJ/MJ TAL')
    # print('--------------------\n')

# simulate_and_print()
# TAL_sys.simulate()
get_TAL_MPSP()

#%% Misc.

def get_non_gaseous_waste_carbon_as_fraction_of_TAL_GWP100():
    return sum([i.get_atomic_flow('C') for i in TAL_sys.products if i.F_mol 
                and ('l' in i.phases or 's' in i.phases or i.phase=='l') 
                and (not i==TAL_product)])/TAL_product.imass['TAL']/TAL_lca.GWP

#%% Load specifications
spec.load_specifications(spec.baseline_yield, spec.baseline_titer, spec.baseline_productivity)


# If,  during TRY analysis, you'd like to set production capacity constant rather than feedstock capacity, uncomment the following line:

def spec_set_production_capacity(
                        desired_annual_production=spec.desired_annual_production, # pure metric ton /y
                        method='analytical', # 'IQ_interpolation' or 'analytical'
                        system=TAL_sys,
                        TEA=None,
                        spec=spec,
                        product_stream=TAL_product, 
                        product_chemical_IDs=['TAL',],
                        feedstock_stream=feedstock,
                        feedstock_F_mass_range=[5000, 2000_000], # wet-kg/h)
                        ):
    set_production_capacity(
                            desired_annual_production=desired_annual_production, # pure metric ton /y
                            method=method, # 'IQ_interpolation' or 'analytical'
                            system=system,
                            TEA=TEA,
                            spec=spec,
                            product_stream=product_stream, 
                            product_chemical_IDs=product_chemical_IDs,
                            feedstock_stream=feedstock_stream,
                            feedstock_F_mass_range=feedstock_F_mass_range, # wet-kg/h
                            )
    
spec.set_production_capacity = spec_set_production_capacity

for i in range(2):
    spec_set_production_capacity(
                            desired_annual_production=spec.desired_annual_production, # pure metric ton /y
                            )
TAL_tea.labor_cost = 3212962*get_flow_tpd()/2205

# simulate_and_print()

# %% Diagram

bst.LABEL_PATH_NUMBER_IN_DIAGRAMS = True
TAL_sys.diagram('cluster')

# #%% TEA breakdown


# TEA_breakdown(unit_groups_dict=unit_groups_dict,
#               print_output=True,
#               )

